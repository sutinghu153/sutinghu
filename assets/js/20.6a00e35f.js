(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{404:function(t,a,s){"use strict";s.r(a);var n=s(54),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"go"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#go"}},[t._v("#")]),t._v(" Go")]),t._v(" "),s("h2",{attrs:{id:"go-环境安装"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#go-环境安装"}},[t._v("#")]),t._v(" Go 环境安装")]),t._v(" "),s("blockquote",[s("p",[s("a",{attrs:{href:"https://m.runoob.com/go/go-environment.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Go 语言环境安装 | (runoob.com)"),s("OutboundLink")],1)])]),t._v(" "),s("h2",{attrs:{id:"基础语法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基础语法"}},[t._v("#")]),t._v(" 基础语法")]),t._v(" "),s("h3",{attrs:{id:"标记"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#标记"}},[t._v("#")]),t._v(" 标记")]),t._v(" "),s("p",[t._v("Go程序可以由多个标记组成，可以是关键字、标识符、常量、字符串、符号等")]),t._v(" "),s("h3",{attrs:{id:"行分隔符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#行分隔符"}},[t._v("#")]),t._v(" 行分隔符")]),t._v(" "),s("p",[t._v("在 Go 程序中，一行代表一个语句结束。每个语句不需要像 C 家族中的其它语言一样以分号 ; 结尾，因为这些工作都将由 Go 编译器自动完成。如果你打算将多个语句写在同一行，它们则必须使用 ;")]),t._v(" "),s("h3",{attrs:{id:"注释"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#注释"}},[t._v("#")]),t._v(" 注释")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 单行注释")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**/")]),t._v(" 多行注释\n")])])]),s("h3",{attrs:{id:"标识符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#标识符"}},[t._v("#")]),t._v(" 标识符")]),t._v(" "),s("p",[t._v("标识符用来命名变量、类型等程序实体，只能由字母和下划线开头")]),t._v(" "),s("h3",{attrs:{id:"关键字"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#关键字"}},[t._v("#")]),t._v(" 关键字")]),t._v(" "),s("p",[s("img",{attrs:{src:"C:%5CUsers%5CMSI%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1654829793479.png",alt:"1654829793479"}})]),t._v(" "),s("h3",{attrs:{id:"变量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#变量"}},[t._v("#")]),t._v(" 变量")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" identifier "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v("\n")])])]),s("p",[t._v("var 标识符 数据类型")]),t._v(" "),s("h4",{attrs:{id:"值类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#值类型"}},[t._v("#")]),t._v(" 值类型")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("所有像int float bool string 这些基础类型都属于值类型，使用这些类型的变量直接指向内存中的值。")])]),t._v(" "),s("li",[s("p",[t._v("当使用等号 "),s("code",[t._v("=")]),t._v(" 将一个变量的值赋值给另一个变量时，如："),s("code",[t._v("j = i")]),t._v("，实际上是在内存中将 i 的值进行了拷贝 。")])]),t._v(" "),s("li",[s("p",[t._v("可以通过 &i 来获取变量 i 的内存地址，例如：0xf840000040（每次的地址都可能不一样）。值类型的变量的值存储在栈中。")])])]),t._v(" "),s("h4",{attrs:{id:"引用类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#引用类型"}},[t._v("#")]),t._v(" 引用类型")]),t._v(" "),s("p",[t._v("引用类型的变量 r1 存储的是 r1 的值所在的内存地址（数字），或内存地址中第一个值所在的位置 。")]),t._v(" "),s("p",[t._v("这个内存地址为称之为指针，这个指针实际上也被存在另外的某一个值中 。")]),t._v(" "),s("h4",{attrs:{id:"赋值操作符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#赋值操作符"}},[t._v("#")]),t._v(" := 赋值操作符")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("a := 50 或 b := false")])]),t._v(" "),s("li",[s("p",[t._v("系统会自动推断")])]),t._v(" "),s("li",[s("p",[t._v("只能被用在函数体内，不可以用于全局变量的声明与赋值")])]),t._v(" "),s("li",[s("p",[t._v("不可以再次对于相同名称的变量使用初始化声明")])])]),t._v(" "),s("h3",{attrs:{id:"常量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常量"}},[t._v("#")]),t._v(" 常量")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("常量是一个简单值的标识符，在程序运行时，不会被修改的量。")])]),t._v(" "),s("li",[s("p",[t._v("常量中的数据类型只可以是布尔型、数字型（整数型、浮点型和复数）和字符串型。")])])]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" identifier "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" value\n")])])]),s("ul",[s("li",[t._v("显式类型定义： "),s("code",[t._v('const b string = "abc"')])]),t._v(" "),s("li",[t._v("隐式类型定义： "),s("code",[t._v('const b = "abc"')])])]),t._v(" "),s("h3",{attrs:{id:"iota"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#iota"}},[t._v("#")]),t._v(" iota")]),t._v(" "),s("ul",[s("li",[t._v("iota，特殊常量，可以认为是一个可以被编译器修改的常量。")]),t._v(" "),s("li",[t._v("在每一个const关键字出现时，被重置为0，然后再下一个const出现之前，每出现一次iota，其所代表的数字会自动增加1 .")])]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("iota")]),t._v("\n    b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("iota")]),t._v("\n    c "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("iota")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h3",{attrs:{id:"运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#运算符"}},[t._v("#")]),t._v(" 运算符")]),t._v(" "),s("h4",{attrs:{id:"算术运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#算术运算符"}},[t._v("#")]),t._v(" 算术运算符")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("+")]),t._v(" "),s("th",[t._v("相加")]),t._v(" "),s("th",[t._v("A + B 输出结果 30")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("-")]),t._v(" "),s("td",[t._v("相减")]),t._v(" "),s("td",[t._v("A - B 输出结果 -10")])]),t._v(" "),s("tr",[s("td",[t._v("*")]),t._v(" "),s("td",[t._v("相乘")]),t._v(" "),s("td",[t._v("A * B 输出结果 200")])]),t._v(" "),s("tr",[s("td",[t._v("/")]),t._v(" "),s("td",[t._v("相除")]),t._v(" "),s("td",[t._v("B / A 输出结果 2")])]),t._v(" "),s("tr",[s("td",[t._v("%")]),t._v(" "),s("td",[t._v("求余")]),t._v(" "),s("td",[t._v("B % A 输出结果 0")])]),t._v(" "),s("tr",[s("td",[t._v("++")]),t._v(" "),s("td",[t._v("自增")]),t._v(" "),s("td",[t._v("A++ 输出结果 11")])]),t._v(" "),s("tr",[s("td",[t._v("--")]),t._v(" "),s("td",[t._v("自减")]),t._v(" "),s("td",[t._v("A-- 输出结果 9")])])])]),t._v(" "),s("h4",{attrs:{id:"关系运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#关系运算符"}},[t._v("#")]),t._v(" 关系运算符")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("==")]),t._v(" "),s("th",[t._v("检查两个值是否相等，如果相等返回 True 否则返回 False。")]),t._v(" "),s("th",[t._v("(A == B) 为 False")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("!=")]),t._v(" "),s("td",[t._v("检查两个值是否不相等，如果不相等返回 True 否则返回 False。")]),t._v(" "),s("td",[t._v("(A != B) 为 True")])]),t._v(" "),s("tr",[s("td",[t._v(">")]),t._v(" "),s("td",[t._v("检查左边值是否大于右边值，如果是返回 True 否则返回 False。")]),t._v(" "),s("td",[t._v("(A > B) 为 False")])]),t._v(" "),s("tr",[s("td",[t._v("<")]),t._v(" "),s("td",[t._v("检查左边值是否小于右边值，如果是返回 True 否则返回 False。")]),t._v(" "),s("td",[t._v("(A < B) 为 True")])]),t._v(" "),s("tr",[s("td",[t._v(">=")]),t._v(" "),s("td",[t._v("检查左边值是否大于等于右边值，如果是返回 True 否则返回 False。")]),t._v(" "),s("td",[t._v("(A >= B) 为 False")])]),t._v(" "),s("tr",[s("td",[t._v("<=")]),t._v(" "),s("td",[t._v("检查左边值是否小于等于右边值，如果是返回 True 否则返回 False。")]),t._v(" "),s("td",[t._v("(A <= B) 为 True")])])])]),t._v(" "),s("h4",{attrs:{id:"逻辑运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#逻辑运算符"}},[t._v("#")]),t._v(" 逻辑运算符")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("&&")]),t._v(" "),s("th",[t._v("逻辑 AND 运算符。 如果两边的操作数都是 True，则条件 True，否则为 False。")]),t._v(" "),s("th",[t._v("(A && B) 为 False")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("||")]),t._v(" "),s("td",[t._v("逻辑 OR 运算符。 如果两边的操作数有一个 True，则条件 True，否则为 False。")]),t._v(" "),s("td",[t._v("(A || B) 为 True")])]),t._v(" "),s("tr",[s("td",[t._v("!")]),t._v(" "),s("td",[t._v("逻辑 NOT 运算符。 如果条件为 True，则逻辑 NOT 条件 False，否则为 True。")]),t._v(" "),s("td",[t._v("!(A && B) 为 True")])])])]),t._v(" "),s("h4",{attrs:{id:"位运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#位运算符"}},[t._v("#")]),t._v(" 位运算符")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"left"}},[t._v("运算符")]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("描述")]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("实例")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("&")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v('按位与运算符"&"是双目运算符。 其功能是参与运算的两数各对应的二进位相与。')]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("(A & B) 结果为 12, 二进制为 0000 1100")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("|")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v('按位或运算符"|"是双目运算符。 其功能是参与运算的两数各对应的二进位相或')]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("(A | B) 结果为 61, 二进制为 0011 1101")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("^")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v('按位异或运算符"^"是双目运算符。 其功能是参与运算的两数各对应的二进位相异或，当两对应的二进位相异时，结果为1。')]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("(A ^ B) 结果为 49, 二进制为 0011 0001")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("<<")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v('左移运算符"<<"是双目运算符。左移n位就是乘以2的n次方。 其功能把"<<"左边的运算数的各二进位全部左移若干位，由"<<"右边的数指定移动的位数，高位丢弃，低位补0。')]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("A << 2 结果为 240 ，二进制为 1111 0000")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v(">>")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v('右移运算符">>"是双目运算符。右移n位就是除以2的n次方。 其功能是把">>"左边的运算数的各二进位全部右移若干位，">>"右边的数指定移动的位数。')]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("A >> 2 结果为 15 ，二进制为 0000 1111")])])])]),t._v(" "),s("blockquote",[s("p",[t._v("& ：与运算，全真为真；")]),t._v(" "),s("p",[t._v("| ：或运算，全假才假；")]),t._v(" "),s("p",[t._v("^ :  异或运算，相同为假，不同为真")])]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"left"}},[t._v("p")]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("q")]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("p & q")]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("p | q")]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("p ^ q")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("0")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("0")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("0")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("0")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("0")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("0")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("1")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("0")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("1")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("1")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("1")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("1")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("1")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("1")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("0")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("1")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("0")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("0")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("1")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("1")])])])]),t._v(" "),s("h4",{attrs:{id:"赋值运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#赋值运算符"}},[t._v("#")]),t._v(" 赋值运算符")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("=")]),t._v(" "),s("th",[t._v("简单的赋值运算符，将一个表达式的值赋给一个左值")]),t._v(" "),s("th",[t._v("C = A + B 将 A + B 表达式结果赋值给 C")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("+=")]),t._v(" "),s("td",[t._v("相加后再赋值")]),t._v(" "),s("td",[t._v("C += A 等于 C = C + A")])]),t._v(" "),s("tr",[s("td",[t._v("-=")]),t._v(" "),s("td",[t._v("相减后再赋值")]),t._v(" "),s("td",[t._v("C -= A 等于 C = C - A")])]),t._v(" "),s("tr",[s("td",[t._v("*=")]),t._v(" "),s("td",[t._v("相乘后再赋值")]),t._v(" "),s("td",[t._v("C *= A 等于 C = C * A")])]),t._v(" "),s("tr",[s("td",[t._v("/=")]),t._v(" "),s("td",[t._v("相除后再赋值")]),t._v(" "),s("td",[t._v("C /= A 等于 C = C / A")])]),t._v(" "),s("tr",[s("td",[t._v("%=")]),t._v(" "),s("td",[t._v("求余后再赋值")]),t._v(" "),s("td",[t._v("C %= A 等于 C = C % A")])]),t._v(" "),s("tr",[s("td",[t._v("<<=")]),t._v(" "),s("td",[t._v("左移后赋值")]),t._v(" "),s("td",[t._v("C <<= 2 等于 C = C << 2")])]),t._v(" "),s("tr",[s("td",[t._v(">>=")]),t._v(" "),s("td",[t._v("右移后赋值")]),t._v(" "),s("td",[t._v("C >>= 2 等于 C = C >> 2")])]),t._v(" "),s("tr",[s("td",[t._v("&=")]),t._v(" "),s("td",[t._v("按位与后赋值")]),t._v(" "),s("td",[t._v("C &= 2 等于 C = C & 2")])]),t._v(" "),s("tr",[s("td",[t._v("^=")]),t._v(" "),s("td",[t._v("按位异或后赋值")]),t._v(" "),s("td",[t._v("C ^= 2 等于 C = C ^ 2")])]),t._v(" "),s("tr",[s("td",[t._v("|=")]),t._v(" "),s("td",[t._v("按位或后赋值")]),t._v(" "),s("td",[t._v("C |= 2 等于 C = C | 2")])])])]),t._v(" "),s("h4",{attrs:{id:"其它运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#其它运算符"}},[t._v("#")]),t._v(" 其它运算符")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"left"}},[t._v("运算符")]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("描述")]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("实例")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("&")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("返回变量存储地址")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("&a; 将给出变量的实际地址。")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("*")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("指针变量。")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("*a; 是一个指针变量")])])])]),t._v(" "),s("h3",{attrs:{id:"条件语句"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#条件语句"}},[t._v("#")]),t._v(" 条件语句")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" 布尔表达式 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 在布尔表达式为 true 时执行 */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 在布尔表达式为 false 时执行 */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("ul",[s("li",[t._v("判断逻辑可不用 "),s("code",[t._v("()")]),t._v(" 包起来")]),t._v(" "),s("li",[t._v("其它与其它语言一致")])]),t._v(" "),s("h3",{attrs:{id:"循环语句"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#循环语句"}},[t._v("#")]),t._v(" 循环语句")]),t._v(" "),s("p",[t._v("Go语言的For循环有3种形式，只有其中的一种使用分号。")]),t._v(" "),s("p",[t._v("和 C 语言的 for 一样：")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" init"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" condition"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" post "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("和 C 的 while 一样：")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" condition "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("和 C 的 for(;😉 一样：")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("ul",[s("li",[t._v("init： 一般为赋值表达式，给控制变量赋初值；")]),t._v(" "),s("li",[t._v("condition： 关系表达式或逻辑表达式，循环控制条件；")]),t._v(" "),s("li",[t._v("post： 一般为赋值表达式，给控制变量增量或减量。")])]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" b "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("15")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v("\n\n   numbers "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n\n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* for 循环 */")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      fmt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Printf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a 的值为: %d\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" b "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      a"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("\n      fmt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Printf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a 的值为: %d\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("x"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("range")]),t._v(" numbers "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      fmt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Printf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"第 %d 位 x 的值 = %d\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("   \n")])])]),s("h3",{attrs:{id:"go函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#go函数"}},[t._v("#")]),t._v(" Go函数")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("function_name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("parameter list"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("return_types"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   函数体\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("ul",[s("li",[t._v("func：函数由 func 开始声明")]),t._v(" "),s("li",[t._v("function_name：函数名称，函数名和参数列表一起构成了函数签名。")]),t._v(" "),s("li",[t._v("parameter list]：参数列表，参数就像一个占位符，当函数被调用时，你可以将值传递给参数，这个值被称为实际参数。参数列表指定的是参数类型、顺序及参数个数。参数是可选的，也就是说函数也可以不包含参数。")]),t._v(" "),s("li",[t._v("return_types：返回类型，函数返回一列值。return_types 是该列值的数据类型。有些功能不需要返回值，这种情况下 return_types 不是必须的。\n"),s("ul",[s("li",[t._v("返回值可以有多个")]),t._v(" "),s("li",[t._v("函数输入可以有多个")])])]),t._v(" "),s("li",[t._v("函数体：函数定义的代码集合。")])]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 函数返回两个数的最大值 */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("max")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("num1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" num2 "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 声明局部变量 */")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" result "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v("\n\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("num1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" num2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      result "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" num1\n   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      result "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" num2\n   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" result \n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h4",{attrs:{id:"函数参数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#函数参数"}},[t._v("#")]),t._v(" 函数参数")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"left"}},[t._v("传递类型")]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("描述")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("值传递")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("值传递是指在调用函数时将实际参数复制一份传递到函数中，这样在函数中如果对参数进行修改，将不会影响到实际参数。")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("引用传递")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("引用传递是指在调用函数时将实际参数的地址传递到函数中，那么在函数中对参数所进行的修改，将影响到实际参数。")])])])]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 定义交换值函数*/")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("swap")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" temp "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v("\n   temp "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("x    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 保持 x 地址上的值 */")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("y      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 将 y 值赋给 x */")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("y "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" temp    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 将 temp 值赋给 y */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h3",{attrs:{id:"变量作用域"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#变量作用域"}},[t._v("#")]),t._v(" 变量作用域")]),t._v(" "),s("p",[t._v("Go 语言中变量可以在三个地方声明：")]),t._v(" "),s("ul",[s("li",[t._v("函数内定义的变量称为局部变量")]),t._v(" "),s("li",[t._v("函数外定义的变量称为全局变量")]),t._v(" "),s("li",[t._v("函数定义中的变量称为形式参数")])]),t._v(" "),s("p",[t._v("不同类型的局部和全局变量默认值为")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"left"}},[t._v("数据类型")]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("初始化默认值")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("int")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("0")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("float32")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("0")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("pointer")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("nil")])])])]),t._v(" "),s("h3",{attrs:{id:"数组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数组"}},[t._v("#")]),t._v(" 数组")]),t._v(" "),s("h4",{attrs:{id:"声明数组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#声明数组"}},[t._v("#")]),t._v(" 声明数组")]),t._v(" "),s("p",[t._v("Go 语言数组声明需要指定元素类型及元素个数，语法格式如下：")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" variable_name "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("SIZE"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" variable_type\n")])])]),s("p",[t._v("以上为一维数组的定义方式。数组长度必须是整数且大于 0。例如以下定义了数组 balance 长度为 10，类型为 float32：")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" balance "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("float32")]),t._v("\n")])])]),s("h4",{attrs:{id:"初始化数组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#初始化数组"}},[t._v("#")]),t._v(" 初始化数组")]),t._v(" "),s("p",[t._v("以下演示了数组初始化：")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" balance "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("float32")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000.0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("7.0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("50.0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("初始化数组中 {} 中的元素个数不能大于 [] 中的数字。")]),t._v(" "),s("p",[t._v("如果忽略 [] 中的数字不设置数组大小，Go 语言会根据元素的个数来设置数组的大小：")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" balance "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("float32")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000.0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("7.0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("50.0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("该实例与上面的实例是一样的，虽然没有设置数组的大小。")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[t._v(" balance"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("50.0")]),t._v("\n")])])]),s("h4",{attrs:{id:"访问数组元素"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#访问数组元素"}},[t._v("#")]),t._v(" 访问数组元素")]),t._v(" "),s("p",[t._v("数组元素可以通过索引（位置）来读取。格式为数组名后加中括号，中括号中为索引的值。例如：")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("float32")]),t._v(" salary "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" balance"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),s("h3",{attrs:{id:"指针"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#指针"}},[t._v("#")]),t._v(" 指针")]),t._v(" "),s("p",[t._v("变量是一种使用方便的占位符，用于引用计算机内存地址。")]),t._v(" "),s("p",[t._v("Go 语言的取地址符是 &，放到一个变量前使用就会返回相应变量的内存地址。")]),t._v(" "),s("h4",{attrs:{id:"什么是指针"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是指针"}},[t._v("#")]),t._v(" 什么是指针")]),t._v(" "),s("p",[t._v("一个指针变量可以指向任何一个值的内存地址。")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" var_name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" \n")])])]),s("p",[t._v("指针使用流程：")]),t._v(" "),s("ul",[s("li",[t._v("定义指针变量。")]),t._v(" "),s("li",[t._v("为指针变量赋值。")]),t._v(" "),s("li",[t._v("访问指针变量中指向地址的值。")])]),t._v(" "),s("h4",{attrs:{id:"go-空指针"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#go-空指针"}},[t._v("#")]),t._v(" Go 空指针")]),t._v(" "),s("p",[t._v("当一个指针被定义后没有分配到任何变量时，它的值为 nil。")]),t._v(" "),s("p",[t._v("nil 指针也称为空指针。")]),t._v(" "),s("p",[t._v("nil在概念上和其它语言的null、None、nil、NULL一样，都指代零值或空值。")]),t._v(" "),s("p",[t._v("一个指针变量通常缩写为 ptr。")]),t._v(" "),s("h3",{attrs:{id:"结构体"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#结构体"}},[t._v("#")]),t._v(" 结构体")]),t._v(" "),s("p",[t._v("结构体是由一系列具有相同类型或不同类型的数据构成的数据集合。")]),t._v(" "),s("h4",{attrs:{id:"定义结构体"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#定义结构体"}},[t._v("#")]),t._v(" 定义结构体")]),t._v(" "),s("p",[t._v("结构体定义需要使用 type 和 struct 语句。struct 语句定义一个新的数据类型，结构体中有一个或多个成员。type 语句设定了结构体的名称。结构体的格式如下：")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" struct_variable_type "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   member definition\n   member definition\n   "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n   member definition\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("一旦定义了结构体类型，它就能用于变量的声明，语法格式如下：")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[t._v("variable_name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" structure_variable_type "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("value1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value2"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("valuen"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h4",{attrs:{id:"结构体指针"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#结构体指针"}},[t._v("#")]),t._v(" 结构体指针")]),t._v(" "),s("p",[t._v("以上定义的指针变量可以存储结构体变量的地址。查看结构体变量地址，可以将 & 符号放置于结构体变量前：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("struct_pointer = &Book1\n")])])]),s("p",[t._v('使用结构体指针访问结构体成员，使用 "." 操作符：')]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("struct_pointer.title\n")])])]),s("h3",{attrs:{id:"切片"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#切片"}},[t._v("#")]),t._v(" 切片")]),t._v(" "),s("p",[t._v('Go 数组的长度不可改变，在特定场景中这样的集合就不太适用，Go中提供了一种灵活，功能强悍的内置类型切片("动态数组"),与数组相比切片的长度是不固定的，可以追加元素，在追加时可能使切片的容量增大。')]),t._v(" "),s("h4",{attrs:{id:"定义切片"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#定义切片"}},[t._v("#")]),t._v(" 定义切片")]),t._v(" "),s("p",[t._v("你可以声明一个未指定大小的数组来定义切片：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("var identifier []type\n")])])]),s("p",[t._v("切片不需要说明长度。")]),t._v(" "),s("p",[t._v("或使用make()函数来创建切片:")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("var slice1 []type = make([]type, len)\n")])])]),s("p",[t._v("也可以简写为")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("slice1 := make([]type, len)\n")])])]),s("p",[t._v("也可以指定容量，其中capacity为可选参数。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("make([]T, length, capacity)\n")])])]),s("h4",{attrs:{id:"len-和-cap-函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#len-和-cap-函数"}},[t._v("#")]),t._v(" len() 和 cap() 函数")]),t._v(" "),s("p",[t._v("切片是可索引的，并且可以由 len() 方法获取长度。")]),t._v(" "),s("p",[t._v("切片提供了计算容量的方法 cap() 可以测量切片最长可以达到多少。")]),t._v(" "),s("h4",{attrs:{id:"空-nil-切片"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#空-nil-切片"}},[t._v("#")]),t._v(" 空(nil)切片")]),t._v(" "),s("p",[t._v("一个切片在未初始化之前默认为 nil，长度为 0")]),t._v(" "),s("h4",{attrs:{id:"append-和-copy-函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#append-和-copy-函数"}},[t._v("#")]),t._v(" append() 和 copy() 函数")]),t._v(" "),s("p",[t._v("增加切片的容量，创建一个新的更大的切片并把原分片的内容都拷贝过来。")]),t._v(" "),s("p",[t._v("下面的代码描述了从拷贝切片的 copy 方法和向切片追加新元素的 append 方法。")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" numbers "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("printSlice")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("numbers"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 允许追加空切片 */")]),t._v("\n   numbers "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("append")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("numbers"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("printSlice")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("numbers"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 向切片添加一个元素 */")]),t._v("\n   numbers "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("append")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("numbers"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("printSlice")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("numbers"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 同时添加多个元素 */")]),t._v("\n   numbers "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("append")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("numbers"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("printSlice")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("numbers"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 创建切片 numbers1 是之前切片的两倍容量*/")]),t._v("\n   numbers1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("make")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("len")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("numbers"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("cap")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("numbers"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 拷贝 numbers 的内容到 numbers1 */")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("copy")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("numbers1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("numbers"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("printSlice")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("numbers1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   \n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h4",{attrs:{id:"切片截取"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#切片截取"}},[t._v("#")]),t._v(" 切片截取")]),t._v(" "),s("p",[t._v("可以通过设置下限及上限来设置截取切片")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 打印原始切片 */")]),t._v("\n   fmt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"numbers =="')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" numbers"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 打印子切片从索引1(包含) 到索引4(不包含)*/")]),t._v("\n   fmt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"numbers[1:4] =="')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" numbers"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 默认下限为 0*/")]),t._v("\n   fmt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"numbers[:3] =="')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" numbers"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 默认上限为 len(s)*/")]),t._v("\n   fmt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"numbers[4:] =="')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" numbers"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n   numbers1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("make")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("printSlice")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("numbers1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 打印子切片从索引  0(包含) 到索引 2(不包含) */")]),t._v("\n   number2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" numbers"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("printSlice")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("number2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 打印子切片从索引 2(包含) 到索引 5(不包含) */")]),t._v("\n   number3 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" numbers"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("printSlice")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("number3"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h3",{attrs:{id:"语言范围"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#语言范围"}},[t._v("#")]),t._v(" 语言范围")]),t._v(" "),s("p",[t._v("range 关键字用于for循环中迭代数组(array)、切片(slice)、通道(channel)或集合(map)的元素。在数组和切片中它返回元素的索引值，在集合中返回 key-value 对的 key 值。")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("Range表达式")]),t._v(" "),s("th",[t._v("第一个值")]),t._v(" "),s("th",[t._v("第二个值[可选的]")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("Array 或者 slice a [n]E")]),t._v(" "),s("td",[t._v("索引 i int")]),t._v(" "),s("td",[t._v("a[i] E")])]),t._v(" "),s("tr",[s("td",[t._v("String s string type")]),t._v(" "),s("td",[t._v("索引 i int")]),t._v(" "),s("td",[t._v("rune int")])]),t._v(" "),s("tr",[s("td",[t._v("map m map[K]V")]),t._v(" "),s("td",[t._v("键 k K")]),t._v(" "),s("td",[t._v("值 m[k] V")])]),t._v(" "),s("tr",[s("td",[t._v("channel c chan E")]),t._v(" "),s("td",[t._v("元素 e E")]),t._v(" "),s("td",[t._v("none")])])])]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//这是我们使用range去求一个slice的和。使用数组跟这个很类似")]),t._v("\n    nums "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    sum "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("_")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" num "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("range")]),t._v(" nums "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        sum "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" num\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    fmt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"sum:"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" sum"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//在数组上使用range将传入index和值两个变量。上面那个例子我们不需要使用该元素的序号，所以我们使用空白符"_"省略了。有时侯我们确实需要知道它的索引。')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" num "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("range")]),t._v(" nums "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" num "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            fmt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"index:"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//range也可以用在map的键值对上。")]),t._v("\n    kvs "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("map")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"apple"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"b"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"banana"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" k"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" v "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("range")]),t._v(" kvs "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        fmt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Printf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%s -> %s\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" k"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" v"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//range也可以用来枚举Unicode字符串。第一个参数是字符的索引，第二个是字符（Unicode的值）本身。")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" c "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("range")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"go"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        fmt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h3",{attrs:{id:"map-集合"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#map-集合"}},[t._v("#")]),t._v(" Map(集合)")]),t._v(" "),s("h4",{attrs:{id:"定义-map"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#定义-map"}},[t._v("#")]),t._v(" 定义 Map")]),t._v(" "),s("p",[t._v("可以使用内建函数 make 也可以使用 map 关键字来定义 Map:")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("/* 声明变量，默认 map 是 nil */\nvar map_variable map[key_data_type]value_data_type\n\n/* 使用 make 函数 */\nmap_variable = make(map[key_data_type]value_data_type)\n")])])]),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 创建集合 */")]),t._v("\n   countryCapitalMap "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("make")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("map")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n   \n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* map 插入 key-value 对，各个国家对应的首都 */")]),t._v("\n   countryCapitalMap"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"France"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Paris"')]),t._v("\n   countryCapitalMap"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Italy"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Rome"')]),t._v("\n   countryCapitalMap"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Japan"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Tokyo"')]),t._v("\n   countryCapitalMap"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"India"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"New Delhi"')]),t._v("\n   \n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 使用 key 输出 map 值 */")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" country "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("range")]),t._v(" countryCapitalMap "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      fmt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Capital of"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("country"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"is"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("countryCapitalMap"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("country"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n   \n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 查看元素在集合中是否存在 */")]),t._v("\n   captial"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ok "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" countryCapitalMap"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"United States"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),s("h4",{attrs:{id:"delete-函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#delete-函数"}},[t._v("#")]),t._v(" delete() 函数")]),t._v(" "),s("p",[t._v("delete() 函数用于删除集合的元素, 参数为 map 和其对应的 key。")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 删除元素 */")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("delete")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("countryCapitalMap"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"France"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h3",{attrs:{id:"类型转换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类型转换"}},[t._v("#")]),t._v(" 类型转换")]),t._v(" "),s("p",[t._v("类型转换用于将一种数据类型的变量转换为另外一种类型的变量。Go 语言类型转换基本格式如下：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("type_name(expression)\n")])])]),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" sum "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("17")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" count "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" mean "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("float32")]),t._v("\n mean "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("float32")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sum"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("float32")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("count"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h3",{attrs:{id:"接口"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#接口"}},[t._v("#")]),t._v(" 接口")]),t._v(" "),s("p",[t._v("把所有的具有共性的方法定义在一起，任何其他类型只要实现了这些方法就是实现了这个接口")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 定义接口 */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" interface_name "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   method_name1 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("return_type"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n   method_name2 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("return_type"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n   method_name3 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("return_type"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n   method_namen "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("return_type"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 定义结构体 */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" struct_name "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* variables */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 实现接口方法 */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("struct_name_variable struct_name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("method_name1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("return_type"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 方法实现 */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("struct_name_variable struct_name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("method_namen")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("return_type"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 方法实现*/")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h3",{attrs:{id:"错误处理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#错误处理"}},[t._v("#")]),t._v(" 错误处理")]),t._v(" "),s("p",[t._v("error类型是一个接口类型，这是它的定义：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("type error interface {\n    Error() string\n}\n")])])]),s("h3",{attrs:{id:"语言反射"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#语言反射"}},[t._v("#")]),t._v(" 语言反射")]),t._v(" "),s("p",[t._v("1、大量使用反射的代码通常会变得难以理解")]),t._v(" "),s("p",[t._v("2、反射的性能低下，基于反射的代码会比正常的代码运行速度慢一到两个数量级")]),t._v(" "),s("h4",{attrs:{id:"valueof"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#valueof"}},[t._v("#")]),t._v(" ValueOf")]),t._v(" "),s("p",[t._v("ValueOf返回一个初始化为interface接口保管的具体值得Value，ValueOf(nil)返回Value零值")]),t._v(" "),s("h4",{attrs:{id:"typeof"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#typeof"}},[t._v("#")]),t._v(" Typeof")]),t._v(" "),s("p",[t._v("Typeof返回接口中保存的值得类型，Typeof(nil)会返回nil")]),t._v(" "),s("h3",{attrs:{id:"并发"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#并发"}},[t._v("#")]),t._v(" 并发")]),t._v(" "),s("p",[t._v("Go语言中的并发程序主要是通过基于CSP（communicating sequential processes）的goroutine和channel来实现，当然也支持使用传统的多线程共享内存的并发方式")]),t._v(" "),s("h4",{attrs:{id:"goroutine"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#goroutine"}},[t._v("#")]),t._v(" goroutine")]),t._v(" "),s("p",[t._v("Go语言中使用goroutine非常简单，只需要在函数或者方法前面加上go关键字就可以创建一个goroutine，从而让该函数或者方法在新的goroutine中执行")]),t._v(" "),s("p",[t._v("匿名函数同样也支持使用go关键字来创建goroutine去执行")]),t._v(" "),s("p",[t._v("一个goroutine必定对应一个函数或者方法，可以创建多个goroutine去执行相同的函数或者方法")]),t._v(" "),s("h4",{attrs:{id:"动态栈"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#动态栈"}},[t._v("#")]),t._v(" 动态栈")]),t._v(" "),s("p",[t._v("操作系统的线程一般都有固定的栈内存（通常为2MB），而 Go 语言中的 goroutine 非常轻量级，一个 goroutine 的初始栈空间很小（一般为2KB），所以在 Go 语言中一次创建数万个 goroutine 也是可能的。并且 goroutine 的栈不是固定的，可以根据需要动态地增大或缩小， Go 的 runtime 会自动为 goroutine 分配合适的栈空间。")]),t._v(" "),s("h4",{attrs:{id:"goroutine调度"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#goroutine调度"}},[t._v("#")]),t._v(" goroutine调度")]),t._v(" "),s("p",[t._v("在经过数个版本迭代之后，目前Go语言的调度器采用的是GPM调度模型")]),t._v(" "),s("ul",[s("li",[t._v("G: 表示goroutine，存储了goroutine的执行stack信息、goroutine状态以及goroutine的任务函数等；另外G对象是可以重用的。")]),t._v(" "),s("li",[t._v("P: 表示逻辑processor，P的数量决定了系统内最大可并行的G的数量（前提：系统的物理cpu核数>=P的数量）；P的最大作用还是其拥有的各种G对象队列、链表、一些cache和状态。")]),t._v(" "),s("li",[t._v("M: M代表着真正的执行计算资源。在绑定有效的p后，进入schedule循环；而schedule循环的机制大致是从各种队列、p的本地队列中获取G，切换到G的执行栈上并执行G的函数，调用goexit做清理工作并回到m，如此反复。M并不保留G状态，这是G可以跨M调度的基础。")])]),t._v(" "),s("h4",{attrs:{id:"gomaxprocs"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gomaxprocs"}},[t._v("#")]),t._v(" GOMAXPROCS")]),t._v(" "),s("p",[t._v("Go运行时，调度器使用GOMAXPROCS的参数来决定需要使用多少个OS线程来同时执行Go代码。默认值是当前计算机的CPU核心数。例如在一个8核处理器的电脑上，GOMAXPROCS默认值为8。Go语言中可以使用runtime.GOMAXPROCS()函数设置当前程序并发时占用的CPU核心数")]),t._v(" "),s("h4",{attrs:{id:"channel"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#channel"}},[t._v("#")]),t._v(" channel")]),t._v(" "),s("p",[t._v("单纯地将函数并发执行是没有意义的，函数与函数间需要交换数据才能体现并发执行函数的意义")]),t._v(" "),s("p",[t._v("虽然可以使用共享内存进行数据交换，但是共享内存在不同的 goroutine 中容易发生竞态问题。为了保证数据交换的正确性，很多并发模型中必须使用互斥锁对内存进行加锁，这种做法势必造成性能问题")]),t._v(" "),s("p",[t._v("Go语言采用的并发模型是CSP（Communicating Sequential Processes），提倡通过通信共享内存，而不是通过共享内存而实现通信")]),t._v(" "),s("p",[t._v("Go 语言中的通道（channel）是一种特殊的类型。通道像一个传送带或者队列，总是遵循先入先出的规则，保证收发数据的顺序。每一个通道都是一个具体类型的导管，也就是声明channel的时候需要为其指定元素类型。")])])}),[],!1,null,null,null);a.default=e.exports}}]);