{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{400:function(t,s,a){\"use strict\";a.r(s);var n=a(54),r=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":t.$parent.slotKey}},[a(\"h1\",{attrs:{id:\"数据结构分析\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#数据结构分析\"}},[t._v(\"#\")]),t._v(\" 数据结构分析\")]),t._v(\" \"),a(\"h2\",{attrs:{id:\"链表\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#链表\"}},[t._v(\"#\")]),t._v(\" 链表\")]),t._v(\" \"),a(\"p\",[t._v(\"链表是一种特殊的数据结构，一般，代码中的栈、队列、堆都在该结构体基础上实现。\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"队列：先进先出，可以用首填充节点，尾消费节点的单链表实现\")]),t._v(\" \"),a(\"li\",[t._v(\"栈：先进后出，可以用首填充节点，首消费节点的单链表实现\")])]),t._v(\" \"),a(\"p\",[t._v(\"一般，链表由两部分组成\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"数据域：通常用来描述该节点的信息\")]),t._v(\" \"),a(\"li\",[t._v(\"指针域：指针域指向下一个节点（上一个节点），指针域的方向和数量决定了链表是单向链表还是双向链表\")]),t._v(\" \"),a(\"li\",[t._v(\"如果链表的首尾节点可以互相连接，那这样的链表是循环链表\")])]),t._v(\" \"),a(\"h3\",{attrs:{id:\"c-链表实现\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#c-链表实现\"}},[t._v(\"#\")]),t._v(\" C 链表实现\")]),t._v(\" \"),a(\"div\",{staticClass:\"language-c extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-c\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"include\")]),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"<stdio.h>\")])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"include\")]),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"<stdlib.h>\")])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"include\")]),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"<string.h>\")])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"include\")]),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"<windows.h>\")])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"include\")]),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"<conio.h>\")])]),t._v(\"\\n\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\" x\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"y\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 数据域元素 \")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"typedef\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"struct\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"elemtype\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\" index\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" \\n\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"char\")]),t._v(\" name\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" \\n\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\" x\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\" y\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"elemtype\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 链表结点 \")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"typedef\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"struct\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"LinkList\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 数据域 \")]),t._v(\"\\n\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"struct\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"elemtype\")]),t._v(\" elem\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 指针域\")]),t._v(\"\\n\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"struct\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"LinkList\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),t._v(\"next\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" \\n\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\" LinkList\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"initlist\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"LinkList\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),t._v(\" first\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"getLength\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"LinkList \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),t._v(\"list\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" \\n\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"addNodeTail\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"LinkList\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),t._v(\" list\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"elemtype \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),t._v(\"e\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"void\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"findelem\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"LinkList\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),t._v(\" list\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\" index\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"elemtype \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),t._v(\"e\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"createNode\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"LinkList\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),t._v(\" node\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 链表的尾部新增一个节点\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"addNodeTail\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"LinkList\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),t._v(\" list\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"elemtype \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),t._v(\"e\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \\n\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n\\tLinkList node\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"if\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"createNode\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"&\")]),t._v(\"node\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"<\")]),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"0\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n\\t\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"printf\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"create node failturn\\\\n\"')]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\\tnode\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"elem \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),t._v(\"e\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\tlist\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"->\")]),t._v(\"next \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"&\")]),t._v(\"node\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 查找链表中的元素,返回链表list中的第index个元素，用e接收 \")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"void\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"findelem\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"LinkList\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),t._v(\" list\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\" index\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"elemtype \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),t._v(\"e\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\" length \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"getLength\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"list\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"if\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"length\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"<\")]),t._v(\"index\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n\\t\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"printf\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"outof Index exception\\\\n\"')]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\t\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"-\")]),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"1\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\\tLinkList \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),t._v(\"mid\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\tmid \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" list\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"for\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\" i\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"0\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"i\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"<\")]),t._v(\"index\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"i\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"++\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n\\t\\tmid \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" mid\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"->\")]),t._v(\"next\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\" \\n\\te \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"&\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"mid\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"elem\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"return\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\t\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\" \\n\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 创建一个节点\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"createNode\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"LinkList\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),t._v(\" node\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 定义链表的首节点\")]),t._v(\"\\n\\tnode \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"LinkList\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"malloc\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"sizeof\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"LinkList\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 空间分配失败则 结束当前 \")]),t._v(\"\\n\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"if\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"node\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"==\")]),a(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"NULL\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n\\t\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"printf\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"init failure\\\\n\"')]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\t\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"-\")]),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"1\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\\tnode\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"->\")]),t._v(\"next \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"NULL\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"0\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 初始化一个链表 \")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"initlist\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"LinkList\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),t._v(\" first\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 定义链表的首节点\")]),t._v(\"\\n\\tfirst \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"LinkList\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"malloc\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"sizeof\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"LinkList\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 空间分配失败则 结束当前 \")]),t._v(\"\\n\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"if\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"first\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"==\")]),a(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"NULL\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n\\t\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"printf\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"init failure\\\\n\"')]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\t\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"-\")]),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"1\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\\tfirst\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"->\")]),t._v(\"next \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"NULL\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"0\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\" \\n\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 计算当前链表的长度\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"getLength\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"LinkList \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),t._v(\"list\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 定义初始长度 \")]),t._v(\"\\n\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\" length \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"0\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"if\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"list\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"==\")]),a(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"NULL\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n\\t\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"0\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 定义中间节点\")]),t._v(\"\\n\\tLinkList \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),t._v(\"mid\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\tmid \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" list\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"while\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"mid\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n\\t\\tlength\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"++\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\t\\tmid \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" mid\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"->\")]),t._v(\"next\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" length\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\")])])]),a(\"h2\",{attrs:{id:\"树-tree\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#树-tree\"}},[t._v(\"#\")]),t._v(\" 树（Tree）\")]),t._v(\" \"),a(\"p\",[t._v(\"数组、链表、栈、队列等都是一对一的数据结构，主要解决一对一的问题。现实中还有很多一对多的情况需要处理，所以需要研究一对多的数据结构。树就是一种一对多的数据结构。\")]),t._v(\" \"),a(\"h2\",{attrs:{id:\"图-graph\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#图-graph\"}},[t._v(\"#\")]),t._v(\" 图（Graph）\")]),t._v(\" \"),a(\"p\",[t._v(\"以上链表、数组等线性结构的数据结构是解决一对一的问题，而树等非线性结构是解决一对多的数据结构，而现实中还有很多的多对多的问题，为了解决这类问题，抽象出了图的定义，图就是用来解决这类问题的。\")]),t._v(\" \"),a(\"h2\",{attrs:{id:\"排序\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#排序\"}},[t._v(\"#\")]),t._v(\" 排序\")]),t._v(\" \"),a(\"blockquote\",[a(\"p\",[a(\"a\",{attrs:{href:\"https://www.cnblogs.com/onepixel/articles/7674659.html\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"可视化算法排序\"),a(\"OutboundLink\")],1)])]),t._v(\" \"),a(\"h3\",{attrs:{id:\"稳定性\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#稳定性\"}},[t._v(\"#\")]),t._v(\" 稳定性\")]),t._v(\" \"),a(\"p\",[t._v(\"使用同样的排序算法，对不同关键字或关键字组合进行排序，如果多次排序后，序列中的每个元素都有一样的顺序，则称该排序方法是稳定的，反之排序方法是不稳定的。\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"内排序\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#内排序\"}},[t._v(\"#\")]),t._v(\" 内排序\")]),t._v(\" \"),a(\"p\",[t._v(\"当进行排序的元素有限，并且待排序的所有记录都被放置在内存中时，则该过程被称为内排序。\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"外排序\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#外排序\"}},[t._v(\"#\")]),t._v(\" 外排序\")]),t._v(\" \"),a(\"p\",[t._v(\"由于排序的记录个数太多，不能同时放置在内存中，因此在排序的过程中还涉及内存和外存数据之间的交换。\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"排序的分类\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#排序的分类\"}},[t._v(\"#\")]),t._v(\" 排序的分类\")]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"C:%5CUsers%5CMSI%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1655343146627.png\",alt:\"1655343146627\"}})]),t._v(\" \"),a(\"img\",{attrs:{src:t.$withBase(\"/imags/1655343146627.png\"),alt:\"1655343146627\"}}),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"C:%5CUsers%5CMSI%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1655343177993.png\",alt:\"1655343177993\"}})]),t._v(\" \"),a(\"img\",{attrs:{src:t.$withBase(\"/imags/1655343177993.png\"),alt:\"1655343177993\"}}),t._v(\" \"),a(\"h4\",{attrs:{id:\"冒泡排序-bubble-sort\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#冒泡排序-bubble-sort\"}},[t._v(\"#\")]),t._v(\" 冒泡排序（Bubble Sort）\")]),t._v(\" \"),a(\"p\",[t._v(\"冒泡排序是一种简单的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果它们的顺序错误就把它们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。\")]),t._v(\" \"),a(\"h5\",{attrs:{id:\"算法描述\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#算法描述\"}},[t._v(\"#\")]),t._v(\" 算法描述\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"比较相邻的元素。如果第一个比第二个大，就交换它们两个；\")]),t._v(\" \"),a(\"li\",[t._v(\"对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对，这样在最后的元素应该会是最大的数；\")]),t._v(\" \"),a(\"li\",[t._v(\"针对所有的元素重复以上的步骤，除了最后一个；\")]),t._v(\" \"),a(\"li\",[t._v(\"重复步骤1~3，直到排序完成。\")])]),t._v(\" \"),a(\"h4\",{attrs:{id:\"选择排序-selection-sort\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#选择排序-selection-sort\"}},[t._v(\"#\")]),t._v(\" 选择排序（Selection Sort）\")]),t._v(\" \"),a(\"p\",[t._v(\"选择排序(Selection-sort)是一种简单直观的排序算法。它的工作原理：首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。\")]),t._v(\" \"),a(\"h5\",{attrs:{id:\"算法描述-2\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#算法描述-2\"}},[t._v(\"#\")]),t._v(\" 算法描述\")]),t._v(\" \"),a(\"p\",[t._v(\"n个记录的直接选择排序可经过n-1趟直接选择排序得到有序结果。具体算法描述如下：\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"初始状态：无序区为R[1..n]，有序区为空；\")]),t._v(\" \"),a(\"li\",[t._v(\"第i趟排序(i=1,2,3…n-1)开始时，当前有序区和无序区分别为R[1..i-1]和R(i..n）。该趟排序从当前无序区中-选出关键字最小的记录 R[k]，将它与无序区的第1个记录R交换，使R[1..i]和R[i+1..n)分别变为记录个数增加1个的新有序区和记录个数减少1个的新无序区；\")]),t._v(\" \"),a(\"li\",[t._v(\"n-1趟结束，数组有序化了。\")])]),t._v(\" \"),a(\"h4\",{attrs:{id:\"插入排序-insertion-sort\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#插入排序-insertion-sort\"}},[t._v(\"#\")]),t._v(\" 插入排序（Insertion Sort）\")]),t._v(\" \"),a(\"p\",[t._v(\"插入排序（Insertion-Sort）的算法描述是一种简单直观的排序算法。它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。\")]),t._v(\" \"),a(\"h5\",{attrs:{id:\"算法描述-3\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#算法描述-3\"}},[t._v(\"#\")]),t._v(\" 算法描述\")]),t._v(\" \"),a(\"p\",[t._v(\"一般来说，插入排序都采用in-place在数组上实现。具体算法描述如下：\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"从第一个元素开始，该元素可以认为已经被排序；\")]),t._v(\" \"),a(\"li\",[t._v(\"取出下一个元素，在已经排序的元素序列中从后向前扫描；\")]),t._v(\" \"),a(\"li\",[t._v(\"如果该元素（已排序）大于新元素，将该元素移到下一位置；\")]),t._v(\" \"),a(\"li\",[t._v(\"重复步骤3，直到找到已排序的元素小于或者等于新元素的位置；\")]),t._v(\" \"),a(\"li\",[t._v(\"将新元素插入到该位置后；\")]),t._v(\" \"),a(\"li\",[t._v(\"重复步骤2~5。\")])]),t._v(\" \"),a(\"h4\",{attrs:{id:\"希尔排序-shell-sort\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#希尔排序-shell-sort\"}},[t._v(\"#\")]),t._v(\" 希尔排序（Shell Sort）\")]),t._v(\" \"),a(\"p\",[t._v(\"1959年Shell发明，第一个突破O(n2)的排序算法，是简单插入排序的改进版。它与插入排序的不同之处在于，它会优先比较距离较远的元素。希尔排序又叫\"),a(\"strong\",[t._v(\"缩小增量排序\")]),t._v(\"。\")]),t._v(\" \"),a(\"h5\",{attrs:{id:\"算法描述-4\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#算法描述-4\"}},[t._v(\"#\")]),t._v(\" 算法描述\")]),t._v(\" \"),a(\"p\",[t._v(\"先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，具体算法描述：\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"选择一个增量序列t1，t2，…，tk，其中ti>tj，tk=1；\")]),t._v(\" \"),a(\"li\",[t._v(\"按增量序列个数k，对序列进行k 趟排序；\")]),t._v(\" \"),a(\"li\",[t._v(\"每趟排序，根据对应的增量ti，将待排序列分割成若干长度为m 的子序列，分别对各子表进行直接插入排序。仅增量因子为1 时，整个序列作为一个表来处理，表长度即为整个序列的长度。\")])]),t._v(\" \"),a(\"h4\",{attrs:{id:\"归并排序-merge-sort\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#归并排序-merge-sort\"}},[t._v(\"#\")]),t._v(\" 归并排序（Merge Sort）\")]),t._v(\" \"),a(\"p\",[t._v(\"归并排序是建立在归并操作上的一种有效的排序算法。该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。若将两个有序表合并成一个有序表，称为2-路归并。\")]),t._v(\" \"),a(\"h5\",{attrs:{id:\"算法描述-5\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#算法描述-5\"}},[t._v(\"#\")]),t._v(\" 算法描述\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"把长度为n的输入序列分成两个长度为n/2的子序列；\")]),t._v(\" \"),a(\"li\",[t._v(\"对这两个子序列分别采用归并排序；\")]),t._v(\" \"),a(\"li\",[t._v(\"将两个排序好的子序列合并成一个最终的排序序列。\")])]),t._v(\" \"),a(\"h4\",{attrs:{id:\"快速排序-quick-sort\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#快速排序-quick-sort\"}},[t._v(\"#\")]),t._v(\" 快速排序（Quick Sort）\")]),t._v(\" \"),a(\"p\",[t._v(\"快速排序的基本思想：通过一趟排序将待排记录分隔成独立的两部分，其中一部分记录的关键字均比另一部分的关键字小，则可分别对这两部分记录继续进行排序，以达到整个序列有序。\")]),t._v(\" \"),a(\"h5\",{attrs:{id:\"算法描述-6\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#算法描述-6\"}},[t._v(\"#\")]),t._v(\" 算法描述\")]),t._v(\" \"),a(\"p\",[t._v(\"快速排序使用分治法来把一个串（list）分为两个子串（sub-lists）。具体算法描述如下：\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"从数列中挑出一个元素，称为 “基准”（pivot）；\")]),t._v(\" \"),a(\"li\",[t._v(\"重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区退出之后，该基准就处于数列的中间位置。这个称为分区（partition）操作；\")]),t._v(\" \"),a(\"li\",[t._v(\"递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序。\")])]),t._v(\" \"),a(\"h4\",{attrs:{id:\"堆排序-heap-sort\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#堆排序-heap-sort\"}},[t._v(\"#\")]),t._v(\" 堆排序（Heap Sort）\")]),t._v(\" \"),a(\"p\",[t._v(\"堆排序（Heapsort）是指利用堆这种数据结构所设计的一种排序算法。堆积是一个近似完全二叉树的结构，并同时满足堆积的性质：即子结点的键值或索引总是小于（或者大于）它的父节点。\")]),t._v(\" \"),a(\"h5\",{attrs:{id:\"算法描述-7\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#算法描述-7\"}},[t._v(\"#\")]),t._v(\" 算法描述\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"将初始待排序关键字序列(R1,R2….Rn)构建成大顶堆，此堆为初始的无序区；\")]),t._v(\" \"),a(\"li\",[t._v(\"将堆顶元素R[1]与最后一个元素R[n]交换，此时得到新的无序区(R1,R2,……Rn-1)和新的有序区(Rn),且满足R[1,2…n-1]<=R[n]；\")]),t._v(\" \"),a(\"li\",[t._v(\"由于交换后新的堆顶R[1]可能违反堆的性质，因此需要对当前无序区(R1,R2,……Rn-1)调整为新堆，然后再次将R[1]与无序区最后一个元素交换，得到新的无序区(R1,R2….Rn-2)和新的有序区(Rn-1,Rn)。不断重复此过程直到有序区的元素个数为n-1，则整个排序过程完成。\")])]),t._v(\" \"),a(\"h4\",{attrs:{id:\"计数排序-counting-sort\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#计数排序-counting-sort\"}},[t._v(\"#\")]),t._v(\" 计数排序（Counting Sort）\")]),t._v(\" \"),a(\"p\",[t._v(\"计数排序不是基于比较的排序算法，其核心在于将输入的数据值转化为键存储在额外开辟的数组空间中。 作为一种线性时间复杂度的排序，计数排序要求输入的数据必须是有确定范围的整数。\")]),t._v(\" \"),a(\"h5\",{attrs:{id:\"算法描述-8\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#算法描述-8\"}},[t._v(\"#\")]),t._v(\" 算法描述\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"找出待排序的数组中最大和最小的元素；\")]),t._v(\" \"),a(\"li\",[t._v(\"统计数组中每个值为i的元素出现的次数，存入数组C的第i项；\")]),t._v(\" \"),a(\"li\",[t._v(\"对所有的计数累加（从C中的第一个元素开始，每一项和前一项相加）；\")]),t._v(\" \"),a(\"li\",[t._v(\"反向填充目标数组：将每个元素i放在新数组的第C(i)项，每放一个元素就将C(i)减去1。\")])]),t._v(\" \"),a(\"h4\",{attrs:{id:\"桶排序-bucket-sort\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#桶排序-bucket-sort\"}},[t._v(\"#\")]),t._v(\" 桶排序（Bucket Sort）\")]),t._v(\" \"),a(\"p\",[t._v(\"桶排序是计数排序的升级版。它利用了函数的映射关系，高效与否的关键就在于这个映射函数的确定。桶排序 (Bucket sort)的工作的原理：假设输入数据服从均匀分布，将数据分到有限数量的桶里，每个桶再分别排序（有可能再使用别的排序算法或是以递归方式继续使用桶排序进行排）。\")]),t._v(\" \"),a(\"h5\",{attrs:{id:\"算法描述-9\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#算法描述-9\"}},[t._v(\"#\")]),t._v(\" 算法描述\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"设置一个定量的数组当作空桶；\")]),t._v(\" \"),a(\"li\",[t._v(\"遍历输入数据，并且把数据一个一个放到对应的桶里去；\")]),t._v(\" \"),a(\"li\",[t._v(\"对每个不是空的桶进行排序；\")]),t._v(\" \"),a(\"li\",[t._v(\"从不是空的桶里把排好序的数据拼接起来。\")])]),t._v(\" \"),a(\"h4\",{attrs:{id:\"基数排序-radix-sort\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#基数排序-radix-sort\"}},[t._v(\"#\")]),t._v(\" 基数排序（Radix Sort）\")]),t._v(\" \"),a(\"p\",[t._v(\"基数排序是按照低位先排序，然后收集；再按照高位排序，然后再收集；依次类推，直到最高位。有时候有些属性是有优先级顺序的，先按低优先级排序，再按高优先级排序。最后的次序就是高优先级高的在前，高优先级相同的低优先级高的在前。\")]),t._v(\" \"),a(\"h5\",{attrs:{id:\"算法描述-10\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#算法描述-10\"}},[t._v(\"#\")]),t._v(\" 算法描述\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"取得数组中的最大数，并取得位数；\")]),t._v(\" \"),a(\"li\",[t._v(\"arr为原始数组，从最低位开始取每个位组成radix数组；\")]),t._v(\" \"),a(\"li\",[t._v(\"对radix进行计数排序（利用计数排序适用于小范围数的特点）；\")])])])}),[],!1,null,null,null);s.default=r.exports}}]);","extractedComments":[]}