{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{424:function(t,a,s){\"use strict\";s.r(a);var e=s(54),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":t.$parent.slotKey}},[s(\"h1\",{attrs:{id:\"qt\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#qt\"}},[t._v(\"#\")]),t._v(\" Qt\")]),t._v(\" \"),s(\"blockquote\",[s(\"p\",[s(\"a\",{attrs:{href:\"http://shouce.jb51.net/qt-beginning/49.html\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"Qt-C++\"),s(\"OutboundLink\")],1)])]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"体积小\")]),t._v(\" \"),s(\"li\",[t._v(\"运行时耗用系统资源小\")]),t._v(\" \"),s(\"li\",[t._v(\"上层接口与硬件无关\")]),t._v(\" \"),s(\"li\",[t._v(\"高度可移植\")])]),t._v(\" \"),s(\"h2\",{attrs:{id:\"什么是qt事件\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#什么是qt事件\"}},[t._v(\"#\")]),t._v(\" 什么是Qt事件？\")]),t._v(\" \"),s(\"p\",[t._v(\"Qt 事件指的是应用程序和用户之间的交互过程，例如用户按下某个按钮，点击某个输入框等等。\")]),t._v(\" \"),s(\"p\",[t._v(\"Qt事件的本质是驱动开发。\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"事件驱动开发-监听器模式\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#事件驱动开发-监听器模式\"}},[t._v(\"#\")]),t._v(\" 事件驱动开发-监听器模式\")]),t._v(\" \"),s(\"p\",[t._v(\"事件驱动的本质实质上是遍历-阻塞-等待，即  for-loop + sleep 模式。\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-c extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-c\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"main\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"while\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"true\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n        Message msg \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"GetMessage\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"if\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"msg\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"isQuitRequest\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n            \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"break\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        \\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// Process the msg object...\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// Clean up here...\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"0\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\")])])]),s(\"p\",[t._v(\"当有事件发生时，例如按钮点击事件，即按钮被点击时，监控键盘的线程被唤醒，从而调用了特定的程序。\")]),t._v(\" \"),s(\"p\",[t._v(\"事件驱动的基本模式是监听器模式， \"),s(\"a\",{attrs:{href:\"https://mp.weixin.qq.com/s/Lr0DsRoAbdRWUcWYR7tmbg\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"监听器模式 (qq.com)\"),s(\"OutboundLink\")],1),t._v(\" ，监听器监听控件，如果对应控件被唤醒，则触发特定的事件。\")]),t._v(\" \"),s(\"p\",[t._v(\"监听器模式在进行一定程度的发展和筛选后，发展出了两个比较通用的模型，即Reactor模式和Preactor模式。\")]),t._v(\" \"),s(\"p\",[t._v(\"而Qt中的事件驱动，其传播媒介为信号和槽。。\")]),t._v(\" \"),s(\"h2\",{attrs:{id:\"什么是信号和槽\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#什么是信号和槽\"}},[t._v(\"#\")]),t._v(\" 什么是信号和槽？\")]),t._v(\" \"),s(\"p\",[t._v(\"通过信号的发送和槽，进行两个对象之间的通信。\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"事件\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#事件\"}},[t._v(\"#\")]),t._v(\" 事件\")]),t._v(\" \"),s(\"p\",[t._v(\"事件是指用户发起点击、下拉、删除等操作的过程。\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"动作\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#动作\"}},[t._v(\"#\")]),t._v(\" 动作\")]),t._v(\" \"),s(\"p\",[t._v(\"动作是指用户的点击、下拉、删除等具体动作。\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"信号\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#信号\"}},[t._v(\"#\")]),t._v(\" 信号\")]),t._v(\" \"),s(\"p\",[t._v(\"信号是指用户在发起某个事件时，传递的信号。\")]),t._v(\" \"),s(\"p\",[t._v(\"在 Qt 中，用户和控件的每次交互过程称为一个事件，比如“用户点击按钮”是一个事件，“用户关闭窗口”也是一个事件。每个事件都会发出一个信号，例如用户点击按钮会发出“按钮被点击”的信号，用户关闭窗口会发出“窗口被关闭”的信号。\")]),t._v(\" \"),s(\"p\",[t._v(\"Qt 中的所有控件都具有接收信号的能力，一个控件还可以接收多个不同的信号。对于接收到的每个信号，控件都会做出相应的响应动作。\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"C:%5CUsers%5CMSI%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1655090817527.png\",alt:\"1655090817527\"}})]),t._v(\" \"),s(\"h3\",{attrs:{id:\"connect-函数实现信号和槽\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#connect-函数实现信号和槽\"}},[t._v(\"#\")]),t._v(\" connect()函数实现信号和槽\")]),t._v(\" \"),s(\"p\",[t._v(\"connect() 是 QObject 类中的一个静态成员函数，专门用来关联指定的信号函数和槽函数。\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"信号发送者\")]),t._v(\" \"),s(\"li\",[t._v(\"信号函数\")]),t._v(\" \"),s(\"li\",[t._v(\"信号的接收者\")]),t._v(\" \"),s(\"li\",[t._v(\"接收信号的槽函数\")])]),t._v(\" \"),s(\"div\",{staticClass:\"language-c++ extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[t._v(\"QObject::connect(const QObject *sender, const char *signal, const QObject *receiver, const char *method, Qt::ConnectionType type = Qt::AutoConnection)\\n\")])])]),s(\"p\",[t._v(\"各个参数的含义分别是：\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"sender：指定信号的发送者；\")]),t._v(\" \"),s(\"li\",[t._v(\"signal：指定信号函数，信号函数必须用 SIGNAL() 宏括起来；\")]),t._v(\" \"),s(\"li\",[t._v(\"reveiver：指定信号的接收者；\")]),t._v(\" \"),s(\"li\",[t._v(\"method：指定接收信号的槽函数，槽函数必须用 SLOT() 宏括起来；\")]),t._v(\" \"),s(\"li\",[t._v(\"type 用于指定关联方式，默认的关联方式为 Qt::AutoConnection，通常不需要手动设定。\")])]),t._v(\" \"),s(\"p\",[t._v(\"一个 connect() 函数只能关联一个信号函数和一个槽函数，程序中可以包含多个 connect() 函数，能实现以下几种效果：\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"关联多个信号函数和多个槽函数；\")]),t._v(\" \"),s(\"li\",[t._v(\"一个信号函数可以关联多个槽函数，当信号发出时，与之关联的槽函数会一个接一个地执行，但它们执行的顺序是随机的，无法人为指定哪个先执行、哪个后执行；\")]),t._v(\" \"),s(\"li\",[t._v(\"多个信号函数可以关联同一个槽函数，无论哪个信号发出，槽函数都会执行。\")])])])}),[],!1,null,null,null);a.default=n.exports}}]);","extractedComments":[]}