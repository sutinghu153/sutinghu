{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{403:function(t,s,a){\"use strict\";a.r(s);var n=a(54),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":t.$parent.slotKey}},[a(\"h1\",{attrs:{id:\"linux多线程\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#linux多线程\"}},[t._v(\"#\")]),t._v(\" Linux多线程\")]),t._v(\" \"),a(\"p\",[t._v(\"使用多线程的目的，是合理的利用资源，提高CPU的效率。\")]),t._v(\" \"),a(\"blockquote\",[a(\"p\",[a(\"a\",{attrs:{href:\"https://zhuanlan.zhihu.com/p/158965214\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"进程、线程基础知识\"),a(\"OutboundLink\")],1)])]),t._v(\" \"),a(\"h2\",{attrs:{id:\"什么是线程\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#什么是线程\"}},[t._v(\"#\")]),t._v(\" 什么是线程？\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"关于进程\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#关于进程\"}},[t._v(\"#\")]),t._v(\" 关于进程\")]),t._v(\" \"),a(\"p\",[t._v(\"一个正在执行的程序，它是\"),a(\"strong\",[t._v(\"资源分配\")]),t._v(\"的\"),a(\"strong\",[t._v(\"最小单位\")]),t._v(\"，进程中的事情都需要按一定的时间顺序进行执行。\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"关于线程\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#关于线程\"}},[t._v(\"#\")]),t._v(\" 关于线程\")]),t._v(\" \"),a(\"p\",[t._v(\"进程只能按顺序执行，有很多问题\")]),t._v(\" \"),a(\"ol\",[a(\"li\",[t._v(\"进程是资源拥有者，创建、销毁与切换存在较大的时空开销\")]),t._v(\" \"),a(\"li\",[t._v(\"由于对称处理机（SMP）出现，可以满足多个运行单位，而多个进程并行开销过大\")])]),t._v(\" \"),a(\"p\",[t._v(\"因此引入线程进行资源管理。\")]),t._v(\" \"),a(\"p\",[t._v(\"线程有时被\"),a(\"strong\",[t._v(\"称为轻量级进程\")]),t._v(\"，\"),a(\"strong\",[t._v(\"程序执行的最小单位\")]),t._v(\"，\"),a(\"strong\",[t._v(\"系统独立调度和分配CPU的基本单位\")]),t._v(\"，它是\"),a(\"strong\",[t._v(\"进程中的一个实体\")]),t._v(\"，\"),a(\"strong\",[t._v(\"一个进程中可以有多个线程\")]),t._v(\"，这些\"),a(\"strong\",[t._v(\"线程共享进程的所有资源\")]),t._v(\"，线程本身只包含一点必备的资源。\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"线程和进程的关系\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#线程和进程的关系\"}},[t._v(\"#\")]),t._v(\" 线程和进程的关系\")]),t._v(\" \"),a(\"ol\",[a(\"li\",[t._v(\"以进程为主的编码方式被称为单线程的编码方式\")]),t._v(\" \"),a(\"li\",[t._v(\"进程是线程的映射，线程是资源的消耗者，线程和进程是多对一的关系\")]),t._v(\" \"),a(\"li\",[t._v(\"线程是进程的基本单位\")]),t._v(\" \"),a(\"li\",[t._v(\"进程可以有多个线程，这些线程共享进程的所有资源\")]),t._v(\" \"),a(\"li\",[t._v(\"子进程创建时会拷贝父进程所有的资源\")])]),t._v(\" \"),a(\"h3\",{attrs:{id:\"线程基本场景\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#线程基本场景\"}},[t._v(\"#\")]),t._v(\" 线程基本场景\")]),t._v(\" \"),a(\"h4\",{attrs:{id:\"并发\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#并发\"}},[t._v(\"#\")]),t._v(\" 并发\")]),t._v(\" \"),a(\"p\",[t._v(\"在同一个时刻，只能有一条指令执行，但多进程模式下，指令能够快速轮换执行，使得在宏观上具有多个进程同时执行的效果。\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"看起来是同时发生\")]),t._v(\" \"),a(\"li\",[t._v(\"单核处理\")])]),t._v(\" \"),a(\"h4\",{attrs:{id:\"并行\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#并行\"}},[t._v(\"#\")]),t._v(\" 并行\")]),t._v(\" \"),a(\"p\",[t._v(\"在同一时刻，有多条指令在多个处理器上同时执行。\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"真正的同时发生\")]),t._v(\" \"),a(\"li\",[t._v(\"多核处理\")])]),t._v(\" \"),a(\"h4\",{attrs:{id:\"同步\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#同步\"}},[t._v(\"#\")]),t._v(\" 同步\")]),t._v(\" \"),a(\"p\",[t._v(\"彼此有依赖的调用不应该同时发生，而同步就是阻止那些”同时发生“的事。因此同步需要确定一些机制，来实现这个目的。\")]),t._v(\" \"),a(\"h4\",{attrs:{id:\"异步\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#异步\"}},[t._v(\"#\")]),t._v(\" 异步\")]),t._v(\" \"),a(\"p\",[t._v(\"异步和同步是相对的，表示任何两个彼此独立的操作是独立的，表明事情的发生独立性。\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"多线程的优势\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#多线程的优势\"}},[t._v(\"#\")]),t._v(\" 多线程的优势\")]),t._v(\" \"),a(\"ol\",[a(\"li\",[t._v(\"在多处理器中开发程序的并行性\")]),t._v(\" \"),a(\"li\",[t._v(\"在等待慢速IO操作时，程序可以执行其它操作，提高并发性\")]),t._v(\" \"),a(\"li\",[t._v(\"模块化的编程，能更清楚的表单程序独立事件的关系，结构清晰\")]),t._v(\" \"),a(\"li\",[t._v(\"占用较少的系统资源（相对于多进程而言）\")]),t._v(\" \"),a(\"li\",[t._v(\"多线程不一定需要多处理器\")])]),t._v(\" \"),a(\"h2\",{attrs:{id:\"线程的周期\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#线程的周期\"}},[t._v(\"#\")]),t._v(\" 线程的周期\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"查看线程id\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#查看线程id\"}},[t._v(\"#\")]),t._v(\" 查看线程ID\")]),t._v(\" \"),a(\"blockquote\",[a(\"p\",[t._v(\"多线程头文件存在于以下目录\")]),t._v(\" \"),a(\"p\",[t._v(\"/usr/include/bits/pthreadtypes.h\")])]),t._v(\" \"),a(\"ul\",[a(\"li\",[a(\"p\",[t._v(\"线程ID : 无符号整数\")]),t._v(\" \"),a(\"div\",{staticClass:\"language-c extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-c\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"typedef\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"unsigned\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"long\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"pthread_t\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\")])])])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"获取线程ID和进程ID的区别\")])])]),t._v(\" \"),a(\"table\",[a(\"thead\",[a(\"tr\",[a(\"th\",{staticStyle:{\"text-align\":\"center\"}}),t._v(\" \"),a(\"th\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"线程\")]),t._v(\" \"),a(\"th\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"进程\")])])]),t._v(\" \"),a(\"tbody\",[a(\"tr\",[a(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"标识符类型\")]),t._v(\" \"),a(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"pthread_t    无符号长整型\")]),t._v(\" \"),a(\"td\",{staticStyle:{\"text-align\":\"center\"}},[a(\"strong\",[t._v(\"pid_t\")])])]),t._v(\" \"),a(\"tr\",[a(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"获取ID\")]),t._v(\" \"),a(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"pthread_self();\")]),t._v(\" \"),a(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"getpid();\")])]),t._v(\" \"),a(\"tr\",[a(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"创建\")]),t._v(\" \"),a(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"pthread_create();\")]),t._v(\" \"),a(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"fork( void);\")])])])]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"查看进程、线程ID实例\")])]),t._v(\" \"),a(\"div\",{staticClass:\"language-c extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-c\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"include\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"stdio.h\"')])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"include\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"pthread.h\"')])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"include\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"string.h\"')])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"include\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"stdlib.h\"')])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"include\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"unistd.h\"')])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"include\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"sys/types.h\"')])]),t._v(\"\\n\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"main\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"pthread_t\")]),t._v(\" self\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"pid_t\")]),t._v(\" pid\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        pid \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"getpid\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        self \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"pthread_self\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"printf\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"pid is %u,self is %u\"')]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"pid\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"self\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"0\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\")])])]),a(\"h3\",{attrs:{id:\"创建一个线程\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#创建一个线程\"}},[t._v(\"#\")]),t._v(\" 创建一个线程\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[a(\"p\",[t._v(\"创建线程的方法\")]),t._v(\" \"),a(\"div\",{staticClass:\"language-c extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-c\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"include\")]),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"<phread.h>\")])]),t._v(\"\\n\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"pthread_create\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"pthread_t\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),t._v(\"id \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"pthread_attr_t\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),t._v(\"attr\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"void\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),t._v(\"fun\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"void\")]),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"void\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),t._v(\"arg\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\")])])]),a(\"ul\",[a(\"li\",[a(\"p\",[t._v(\"id ：传递一个pthread_t类型的变量的地址，创建成功后，用来获取新创建的线程的TID\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"attr：指定线程的属性 默认使用NULL 表示线程的调度策略、继承性、分离性\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"fun：线程函数的地址，回调函数（新线程要执行的函数）\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"arg：传递给线程函数的参数（回调函数的参数，多参数使用结构体传递）\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"返回值，成功返回0，失败返回错误码\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[a(\"p\",[t._v(\"usr/include/asm-generic/errno.h 包含了所有的错误码\")]),t._v(\" \"),a(\"div\",{staticClass:\"language-c extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-c\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"define\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token macro-name\"}},[t._v(\"EDEADLK\")]),t._v(\"\\t\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token expression\"}},[a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"35\")]),t._v(\"\\t\")]),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/* Resource deadlock would occur */\")])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"define\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token macro-name\"}},[t._v(\"ENAMETOOLONG\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token expression\"}},[a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"36\")]),t._v(\"\\t\")]),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/* File name too long */\")])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"define\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token macro-name\"}},[t._v(\"ENOLCK\")]),t._v(\"\\t\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token expression\"}},[a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"37\")]),t._v(\"\\t\")]),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/* No record locks available */\")])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"define\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token macro-name\"}},[t._v(\"ENOSYS\")]),t._v(\"\\t\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token expression\"}},[a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"38\")]),t._v(\"\\t\")]),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/* Function not implemented */\")])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"define\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token macro-name\"}},[t._v(\"ENOTEMPTY\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token expression\"}},[a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"39\")]),t._v(\"\\t\")]),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/* Directory not empty */\")])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"define\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token macro-name\"}},[t._v(\"ELOOP\")]),t._v(\"\\t\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token expression\"}},[a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"40\")]),t._v(\"\\t\")]),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/* Too many symbolic links encountered */\")])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"define\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token macro-name\"}},[t._v(\"EWOULDBLOCK\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token expression\"}},[t._v(\"EAGAIN\\t\")]),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/* Operation would block */\")])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"define\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token macro-name\"}},[t._v(\"ENOMSG\")]),t._v(\"\\t\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token expression\"}},[a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"42\")]),t._v(\"\\t\")]),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/* No message of desired type */\")])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"define\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token macro-name\"}},[t._v(\"EIDRM\")]),t._v(\"\\t\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token expression\"}},[a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"43\")]),t._v(\"\\t\")]),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/* Identifier removed */\")])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"define\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token macro-name\"}},[t._v(\"ECHRNG\")]),t._v(\"\\t\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token expression\"}},[a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"44\")]),t._v(\"\\t\")]),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/* Channel number out of range */\")])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"define\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token macro-name\"}},[t._v(\"EL2NSYNC\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token expression\"}},[a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"45\")]),t._v(\"\\t\")]),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/* Level 2 not synchronized */\")])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"define\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token macro-name\"}},[t._v(\"EL3HLT\")]),t._v(\"\\t\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token expression\"}},[a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"46\")]),t._v(\"\\t\")]),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/* Level 3 halted */\")])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"define\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token macro-name\"}},[t._v(\"EL3RST\")]),t._v(\"\\t\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token expression\"}},[a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"47\")]),t._v(\"\\t\")]),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/* Level 3 reset */\")])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"define\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token macro-name\"}},[t._v(\"ELNRNG\")]),t._v(\"\\t\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token expression\"}},[a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"48\")]),t._v(\"\\t\")]),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/* Link number out of range */\")])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"define\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token macro-name\"}},[t._v(\"EUNATCH\")]),t._v(\"\\t\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token expression\"}},[a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"49\")]),t._v(\"\\t\")]),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/* Protocol driver not attached */\")])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"define\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token macro-name\"}},[t._v(\"ENOCSI\")]),t._v(\"\\t\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token expression\"}},[a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"50\")]),t._v(\"\\t\")]),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/* No CSI structure available */\")])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"define\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token macro-name\"}},[t._v(\"EL2HLT\")]),t._v(\"\\t\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token expression\"}},[a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"51\")]),t._v(\"\\t\")]),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/* Level 2 halted */\")])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"define\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token macro-name\"}},[t._v(\"EBADE\")]),t._v(\"\\t\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token expression\"}},[a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"52\")]),t._v(\"\\t\")]),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/* Invalid exchange */\")])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"define\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token macro-name\"}},[t._v(\"EBADR\")]),t._v(\"\\t\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token expression\"}},[a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"53\")]),t._v(\"\\t\")]),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/* Invalid request descriptor */\")])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"define\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token macro-name\"}},[t._v(\"EXFULL\")]),t._v(\"\\t\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token expression\"}},[a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"54\")]),t._v(\"\\t\")]),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/* Exchange full */\")])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"define\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token macro-name\"}},[t._v(\"ENOANO\")]),t._v(\"\\t\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token expression\"}},[a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"55\")]),t._v(\"\\t\")]),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/* No anode */\")])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"define\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token macro-name\"}},[t._v(\"EBADRQC\")]),t._v(\"\\t\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token expression\"}},[a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"56\")]),t._v(\"\\t\")]),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/* Invalid request code */\")])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"define\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token macro-name\"}},[t._v(\"EBADSLT\")]),t._v(\"\\t\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token expression\"}},[a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"57\")]),t._v(\"\\t\")]),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/* Invalid slot */\")])]),t._v(\"\\n\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"define\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token macro-name\"}},[t._v(\"EDEADLOCK\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token expression\"}},[t._v(\"EDEADLK\")])]),t._v(\"\\n\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"define\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token macro-name\"}},[t._v(\"EBFONT\")]),t._v(\"\\t\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token expression\"}},[a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"59\")]),t._v(\"\\t\")]),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/* Bad font file format */\")])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"define\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token macro-name\"}},[t._v(\"ENOSTR\")]),t._v(\"\\t\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token expression\"}},[a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"60\")]),t._v(\"\\t\")]),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/* Device not a stream */\")])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"define\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token macro-name\"}},[t._v(\"ENODATA\")]),t._v(\"\\t\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token expression\"}},[a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"61\")]),t._v(\"\\t\")]),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/* No data available */\")])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"define\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token macro-name\"}},[t._v(\"ETIME\")]),t._v(\"\\t\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token expression\"}},[a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"62\")]),t._v(\"\\t\")]),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/* Timer expired */\")])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"define\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token macro-name\"}},[t._v(\"ENOSR\")]),t._v(\"\\t\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token expression\"}},[a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"63\")]),t._v(\"\\t\")]),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/* Out of streams resources */\")])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"define\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token macro-name\"}},[t._v(\"ENONET\")]),t._v(\"\\t\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token expression\"}},[a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"64\")]),t._v(\"\\t\")]),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/* Machine is not on the network */\")])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"define\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token macro-name\"}},[t._v(\"ENOPKG\")]),t._v(\"\\t\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token expression\"}},[a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"65\")]),t._v(\"\\t\")]),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/* Package not installed */\")])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"define\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token macro-name\"}},[t._v(\"EREMOTE\")]),t._v(\"\\t\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token expression\"}},[a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"66\")]),t._v(\"\\t\")]),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/* Object is remote */\")])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"define\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token macro-name\"}},[t._v(\"ENOLINK\")]),t._v(\"\\t\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token expression\"}},[a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"67\")]),t._v(\"\\t\")]),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/* Link has been severed */\")])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"define\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token macro-name\"}},[t._v(\"EADV\")]),t._v(\"\\t\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token expression\"}},[a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"68\")]),t._v(\"\\t\")]),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/* Advertise error */\")])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"define\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token macro-name\"}},[t._v(\"ESRMNT\")]),t._v(\"\\t\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token expression\"}},[a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"69\")]),t._v(\"\\t\")]),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/* Srmount error */\")])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"define\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token macro-name\"}},[t._v(\"ECOMM\")]),t._v(\"\\t\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token expression\"}},[a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"70\")]),t._v(\"\\t\")]),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/* Communication error on send */\")])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"define\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token macro-name\"}},[t._v(\"EPROTO\")]),t._v(\"\\t\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token expression\"}},[a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"71\")]),t._v(\"\\t\")]),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/* Protocol error */\")])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"define\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token macro-name\"}},[t._v(\"EMULTIHOP\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token expression\"}},[a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"72\")]),t._v(\"\\t\")]),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/* Multihop attempted */\")])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"define\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token macro-name\"}},[t._v(\"EDOTDOT\")]),t._v(\"\\t\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token expression\"}},[a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"73\")]),t._v(\"\\t\")]),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/* RFS specific error */\")])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"define\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token macro-name\"}},[t._v(\"EBADMSG\")]),t._v(\"\\t\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token expression\"}},[a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"74\")]),t._v(\"\\t\")]),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/* Not a data message */\")])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"define\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token macro-name\"}},[t._v(\"EOVERFLOW\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token expression\"}},[a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"75\")]),t._v(\"\\t\")]),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/* Value too large for defined data type */\")])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"define\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token macro-name\"}},[t._v(\"ENOTUNIQ\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token expression\"}},[a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"76\")]),t._v(\"\\t\")]),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/* Name not unique on network */\")])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"define\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token macro-name\"}},[t._v(\"EBADFD\")]),t._v(\"\\t\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token expression\"}},[a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"77\")]),t._v(\"\\t\")]),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/* File descriptor in bad state */\")])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"define\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token macro-name\"}},[t._v(\"EREMCHG\")]),t._v(\"\\t\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token expression\"}},[a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"78\")]),t._v(\"\\t\")]),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/* Remote address changed */\")])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"define\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token macro-name\"}},[t._v(\"ELIBACC\")]),t._v(\"\\t\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token expression\"}},[a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"79\")]),t._v(\"\\t\")]),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/* Can not access a needed shared library */\")])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"define\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token macro-name\"}},[t._v(\"ELIBBAD\")]),t._v(\"\\t\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token expression\"}},[a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"80\")]),t._v(\"\\t\")]),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/* Accessing a corrupted shared library */\")])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"define\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token macro-name\"}},[t._v(\"ELIBSCN\")]),t._v(\"\\t\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token expression\"}},[a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"81\")]),t._v(\"\\t\")]),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/* .lib section in a.out corrupted */\")])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"define\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token macro-name\"}},[t._v(\"ELIBMAX\")]),t._v(\"\\t\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token expression\"}},[a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"82\")]),t._v(\"\\t\")]),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/* Attempting to link in too many shared libraries */\")])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"define\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token macro-name\"}},[t._v(\"ELIBEXEC\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token expression\"}},[a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"83\")]),t._v(\"\\t\")]),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/* Cannot exec a shared library directly */\")])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"define\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token macro-name\"}},[t._v(\"EILSEQ\")]),t._v(\"\\t\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token expression\"}},[a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"84\")]),t._v(\"\\t\")]),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/* Illegal byte sequence */\")])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"define\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token macro-name\"}},[t._v(\"ERESTART\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token expression\"}},[a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"85\")]),t._v(\"\\t\")]),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/* Interrupted system call should be restarted */\")])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"define\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token macro-name\"}},[t._v(\"ESTRPIPE\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token expression\"}},[a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"86\")]),t._v(\"\\t\")]),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/* Streams pipe error */\")])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"define\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token macro-name\"}},[t._v(\"EUSERS\")]),t._v(\"\\t\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token expression\"}},[a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"87\")]),t._v(\"\\t\")]),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/* Too many users */\")])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"define\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token macro-name\"}},[t._v(\"ENOTSOCK\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token expression\"}},[a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"88\")]),t._v(\"\\t\")]),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/* Socket operation on non-socket */\")])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"define\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token macro-name\"}},[t._v(\"EDESTADDRREQ\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token expression\"}},[a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"89\")]),t._v(\"\\t\")]),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/* Destination address required */\")])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"define\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token macro-name\"}},[t._v(\"EMSGSIZE\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token expression\"}},[a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"90\")]),t._v(\"\\t\")]),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/* Message too long */\")])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"define\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token macro-name\"}},[t._v(\"EPROTOTYPE\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token expression\"}},[a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"91\")]),t._v(\"\\t\")]),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/* Protocol wrong type for socket */\")])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"define\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token macro-name\"}},[t._v(\"ENOPROTOOPT\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token expression\"}},[a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"92\")]),t._v(\"\\t\")]),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/* Protocol not available */\")])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"define\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token macro-name\"}},[t._v(\"EPROTONOSUPPORT\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token expression\"}},[a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"93\")]),t._v(\"\\t\")]),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/* Protocol not supported */\")])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"define\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token macro-name\"}},[t._v(\"ESOCKTNOSUPPORT\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token expression\"}},[a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"94\")]),t._v(\"\\t\")]),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/* Socket type not supported */\")])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"define\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token macro-name\"}},[t._v(\"EOPNOTSUPP\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token expression\"}},[a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"95\")]),t._v(\"\\t\")]),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/* Operation not supported on transport endpoint */\")])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"define\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token macro-name\"}},[t._v(\"EPFNOSUPPORT\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token expression\"}},[a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"96\")]),t._v(\"\\t\")]),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/* Protocol family not supported */\")])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"define\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token macro-name\"}},[t._v(\"EAFNOSUPPORT\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token expression\"}},[a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"97\")]),t._v(\"\\t\")]),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/* Address family not supported by protocol */\")])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"define\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token macro-name\"}},[t._v(\"EADDRINUSE\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token expression\"}},[a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"98\")]),t._v(\"\\t\")]),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/* Address already in use */\")])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"define\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token macro-name\"}},[t._v(\"EADDRNOTAVAIL\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token expression\"}},[a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"99\")]),t._v(\"\\t\")]),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/* Cannot assign requested address */\")])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"define\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token macro-name\"}},[t._v(\"ENETDOWN\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token expression\"}},[a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"100\")]),t._v(\"\\t\")]),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/* Network is down */\")])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"define\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token macro-name\"}},[t._v(\"ENETUNREACH\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token expression\"}},[a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"101\")]),t._v(\"\\t\")]),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/* Network is unreachable */\")])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"define\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token macro-name\"}},[t._v(\"ENETRESET\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token expression\"}},[a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"102\")]),t._v(\"\\t\")]),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/* Network dropped connection because of reset */\")])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"define\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token macro-name\"}},[t._v(\"ECONNABORTED\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token expression\"}},[a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"103\")]),t._v(\"\\t\")]),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/* Software caused connection abort */\")])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"define\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token macro-name\"}},[t._v(\"ECONNRESET\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token expression\"}},[a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"104\")]),t._v(\"\\t\")]),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/* Connection reset by peer */\")])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"define\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token macro-name\"}},[t._v(\"ENOBUFS\")]),t._v(\"\\t\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token expression\"}},[a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"105\")]),t._v(\"\\t\")]),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/* No buffer space available */\")])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"define\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token macro-name\"}},[t._v(\"EISCONN\")]),t._v(\"\\t\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token expression\"}},[a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"106\")]),t._v(\"\\t\")]),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/* Transport endpoint is already connected */\")])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"define\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token macro-name\"}},[t._v(\"ENOTCONN\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token expression\"}},[a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"107\")]),t._v(\"\\t\")]),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/* Transport endpoint is not connected */\")])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"define\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token macro-name\"}},[t._v(\"ESHUTDOWN\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token expression\"}},[a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"108\")]),t._v(\"\\t\")]),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/* Cannot send after transport endpoint shutdown */\")])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"define\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token macro-name\"}},[t._v(\"ETOOMANYREFS\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token expression\"}},[a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"109\")]),t._v(\"\\t\")]),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/* Too many references: cannot splice */\")])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"define\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token macro-name\"}},[t._v(\"ETIMEDOUT\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token expression\"}},[a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"110\")]),t._v(\"\\t\")]),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/* Connection timed out */\")])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"define\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token macro-name\"}},[t._v(\"ECONNREFUSED\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token expression\"}},[a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"111\")]),t._v(\"\\t\")]),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/* Connection refused */\")])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"define\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token macro-name\"}},[t._v(\"EHOSTDOWN\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token expression\"}},[a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"112\")]),t._v(\"\\t\")]),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/* Host is down */\")])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"define\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token macro-name\"}},[t._v(\"EHOSTUNREACH\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token expression\"}},[a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"113\")]),t._v(\"\\t\")]),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/* No route to host */\")])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"define\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token macro-name\"}},[t._v(\"EALREADY\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token expression\"}},[a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"114\")]),t._v(\"\\t\")]),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/* Operation already in progress */\")])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"define\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token macro-name\"}},[t._v(\"EINPROGRESS\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token expression\"}},[a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"115\")]),t._v(\"\\t\")]),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/* Operation now in progress */\")])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"define\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token macro-name\"}},[t._v(\"ESTALE\")]),t._v(\"\\t\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token expression\"}},[a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"116\")]),t._v(\"\\t\")]),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/* Stale file handle */\")])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"define\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token macro-name\"}},[t._v(\"EUCLEAN\")]),t._v(\"\\t\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token expression\"}},[a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"117\")]),t._v(\"\\t\")]),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/* Structure needs cleaning */\")])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"define\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token macro-name\"}},[t._v(\"ENOTNAM\")]),t._v(\"\\t\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token expression\"}},[a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"118\")]),t._v(\"\\t\")]),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/* Not a XENIX named type file */\")])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"define\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token macro-name\"}},[t._v(\"ENAVAIL\")]),t._v(\"\\t\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token expression\"}},[a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"119\")]),t._v(\"\\t\")]),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/* No XENIX semaphores available */\")])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"define\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token macro-name\"}},[t._v(\"EISNAM\")]),t._v(\"\\t\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token expression\"}},[a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"120\")]),t._v(\"\\t\")]),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/* Is a named type file */\")])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"define\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token macro-name\"}},[t._v(\"EREMOTEIO\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token expression\"}},[a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"121\")]),t._v(\"\\t\")]),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/* Remote I/O error */\")])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"define\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token macro-name\"}},[t._v(\"EDQUOT\")]),t._v(\"\\t\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token expression\"}},[a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"122\")]),t._v(\"\\t\")]),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/* Quota exceeded */\")])]),t._v(\"\\n\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"define\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token macro-name\"}},[t._v(\"ENOMEDIUM\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token expression\"}},[a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"123\")]),t._v(\"\\t\")]),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/* No medium found */\")])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"define\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token macro-name\"}},[t._v(\"EMEDIUMTYPE\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token expression\"}},[a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"124\")]),t._v(\"\\t\")]),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/* Wrong medium type */\")])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"define\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token macro-name\"}},[t._v(\"ECANCELED\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token expression\"}},[a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"125\")]),t._v(\"\\t\")]),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/* Operation Canceled */\")])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"define\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token macro-name\"}},[t._v(\"ENOKEY\")]),t._v(\"\\t\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token expression\"}},[a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"126\")]),t._v(\"\\t\")]),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/* Required key not available */\")])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"define\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token macro-name\"}},[t._v(\"EKEYEXPIRED\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token expression\"}},[a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"127\")]),t._v(\"\\t\")]),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/* Key has expired */\")])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"define\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token macro-name\"}},[t._v(\"EKEYREVOKED\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token expression\"}},[a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"128\")]),t._v(\"\\t\")]),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/* Key has been revoked */\")])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"define\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token macro-name\"}},[t._v(\"EKEYREJECTED\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token expression\"}},[a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"129\")]),t._v(\"\\t\")]),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/* Key was rejected by service */\")])]),t._v(\"\\n\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/* for robust mutexes */\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"define\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token macro-name\"}},[t._v(\"EOWNERDEAD\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token expression\"}},[a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"130\")]),t._v(\"\\t\")]),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/* Owner died */\")])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"define\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token macro-name\"}},[t._v(\"ENOTRECOVERABLE\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token expression\"}},[a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"131\")]),t._v(\"\\t\")]),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/* State not recoverable */\")])]),t._v(\"\\n\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"define\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token macro-name\"}},[t._v(\"ERFKILL\")]),t._v(\"\\t\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token expression\"}},[a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"132\")]),t._v(\"\\t\")]),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/* Operation not possible due to RF-kill */\")])]),t._v(\"\\n\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"define\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token macro-name\"}},[t._v(\"EHWPOISON\")]),t._v(\"\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token expression\"}},[a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"133\")]),t._v(\"\\t\")]),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/* Memory page has hardware error */\")])]),t._v(\"\\n\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"endif\")])]),t._v(\"\\n\\n\")])])])])])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"创建线程的使用\")])])])])]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"代码示例\")])]),t._v(\" \"),a(\"div\",{staticClass:\"language-c extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-c\"}},[a(\"code\",[t._v(\"include \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"stdio.h\"')]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"include\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"pthread.h\"')])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"include\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"string.h\"')])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"include\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"stdlib.h\"')])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"include\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"unistd.h\"')])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"include\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"sys/types.h\"')])]),t._v(\"\\n\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"void\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"print_id\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"char\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),t._v(\"name\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"pid_t\")]),t._v(\" pid\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"pthread_t\")]),t._v(\" tid\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        pid \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"getpid\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        tid \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"pthread_self\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"printf\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"%s pid is %u , tid is %u\\\\n\"')]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"name\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"pid\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"tid\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"void\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"thread_fun\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"void\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),t._v(\"arg\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"print_id\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"arg\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"void\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"0\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"main\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"pthread_t\")]),t._v(\" self\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\" err\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        err \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"pthread_create\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"&\")]),t._v(\"self\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),a(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"NULL\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"thread_fun\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"new thread name is sutinghu\"')]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"if\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"err\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"!=\")]),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"0\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n                \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"printf\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"thread create failure\\\\n\"')]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n                \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"-\")]),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"1\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"print_id\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"main thread:\"')]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"sleep\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"2\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"0\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\")])])]),a(\"p\",[a(\"strong\",[t._v(\"结果\")])]),t._v(\" \"),a(\"div\",{staticClass:\"language-shell extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-shell\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),t._v(\"root@localhost test\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"# ./thread_create \")]),t._v(\"\\nmain thread: pid is \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"14794\")]),t._v(\" , tid is \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"1560885056\")]),t._v(\"\\nnew thread name is sutinghu pid is \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"14794\")]),t._v(\" , tid is \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"1552488192\")]),t._v(\"\\n\")])])]),a(\"h3\",{attrs:{id:\"线程的生命周期\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#线程的生命周期\"}},[t._v(\"#\")]),t._v(\" 线程的生命周期\")]),t._v(\" \"),a(\"p\",[t._v(\"主函数中的 \"),a(\"code\",[t._v(\"main\")]),t._v(\" 方法也是一个线程，它被称为\"),a(\"strong\",[t._v(\"主线程\")]),t._v(\" 。\")]),t._v(\" \"),a(\"blockquote\",[a(\"p\",[a(\"a\",{attrs:{href:\"https://zhuanlan.zhihu.com/p/175943809\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"Linux线程生命周期与状态 \"),a(\"OutboundLink\")],1)])]),t._v(\" \"),a(\"h4\",{attrs:{id:\"生命周期\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#生命周期\"}},[t._v(\"#\")]),t._v(\" 生命周期\")]),t._v(\" \"),a(\"ol\",[a(\"li\",[t._v(\"当\"),a(\"code\",[t._v(\"C程序运\")]),t._v(\"行时，首先运行\"),a(\"code\",[t._v(\"main\")]),t._v(\"函数，在线程代码中，这个特殊的执行流程被称为 \"),a(\"strong\",[t._v(\"初始线程 或 主线程\")]),t._v(\"。\")]),t._v(\" \"),a(\"li\",[t._v(\"主线程的特殊性在于，它在\"),a(\"code\",[t._v(\"main函数\")]),t._v(\"返回的时候，会导致进程结束，进程内所有的线程都会结束。\")]),t._v(\" \"),a(\"li\",[t._v(\"在主线程中使用 \"),a(\"code\",[t._v(\"pthread_exit()\")]),t._v(\" 函数，这样进程会等待所有线程结束时终止\")]),t._v(\" \"),a(\"li\",[t._v(\"主线程接受参数的方式是通过 \"),a(\"code\",[t._v(\"argc\")]),t._v(\" 和````argv\"),a(\"code\",[t._v(\"普通的线程只有一个参数\")]),t._v(\"void*```\")]),t._v(\" \"),a(\"li\",[t._v(\"在绝大多数情况下，主线程在默认堆栈上运行，这个堆栈可以增长到足够的长度，而普通的线程的堆栈是受限制的，一旦溢出就会出错。\")]),t._v(\" \"),a(\"li\",[t._v(\"主线程和其他子线程获取在整个CPU时钟周期中\"),a(\"strong\",[t._v(\"获得资源调度的程度是均等\")]),t._v(\"的,也就是说所有线程默认状态下是\"),a(\"strong\",[t._v(\"异步独立\")]),t._v(\"运行的。\")]),t._v(\" \"),a(\"li\",[t._v(\"主线程是随着进程的创建而创建\")]),t._v(\" \"),a(\"li\",[t._v(\"其它线程可以通过调用函数来创建，主要调用 pthread_create\")]),t._v(\" \"),a(\"li\",[t._v(\"新线程可能在当前线程从函数 pthread_create 返回之前就已经运行了，甚至新线程可能在当前线程从pthread_create返回之前就已经运行完毕了\")])]),t._v(\" \"),a(\"h4\",{attrs:{id:\"线程状态\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#线程状态\"}},[t._v(\"#\")]),t._v(\" 线程状态\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[a(\"p\",[a(\"strong\",[t._v(\"就绪\")]),t._v(\"：等待可用的CPU资源，其他条件一切准备好。当线程被pthread_create创建时或者阻塞状态结束后就处于准备状态。\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[a(\"strong\",[t._v(\"运行\")]),t._v(\" ：线程已经获得CPU的使用权，并且正在运行，在多核心的机器中同时存在多个线程正在运行。如果这种情况不加以控制，会造成整个程序没响应。\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[a(\"strong\",[t._v(\"阻塞\")]),t._v(\"：指一个线程在执行过程中暂停，以等待某个条件的触发。\")])]),t._v(\" \"),a(\"li\",[a(\"ul\",[a(\"li\",[t._v(\"例如线程可能在处理有关I/O的任务，可能I/O设备繁忙尚未响应或没有可用的I/O缓存。\")]),t._v(\" \"),a(\"li\",[t._v(\"也可能当前线程等待一个可用的条件便来变量。\")]),t._v(\" \"),a(\"li\",[t._v(\"错误地对一个已被锁住的互斥量加锁\")]),t._v(\" \"),a(\"li\",[t._v(\"调用sigwait等待尚未发生的信号。\")])])]),t._v(\" \"),a(\"li\",[a(\"p\",[a(\"strong\",[t._v(\"终止\")]),t._v(\"：线程已经从回调函数中返回，或者调用pthread_exit返回，或者被强制终止。\")])])]),t._v(\" \"),a(\"img\",{attrs:{src:t.$withBase(\"/imags/xc_smzq.png\"),alt:\"xc_smzq\"}}),t._v(\" \"),a(\"h4\",{attrs:{id:\"线程的回收\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#线程的回收\"}},[t._v(\"#\")]),t._v(\" 线程的回收\")]),t._v(\" \"),a(\"ol\",[a(\"li\",[t._v(\"线程默认是 非分离的\")]),t._v(\" \"),a(\"li\",[t._v(\"具有分离性的线程，终止时会立刻被回收，回收将释放所有线程终止时来释放的系统资源\")]),t._v(\" \"),a(\"li\",[t._v(\"线程占用的程序资源，需要自己释放\")]),t._v(\" \"),a(\"li\",[t._v(\"没有被分离的线程在终止时，保留了虚拟内存及系统资源，这种线程被称为僵尸线程\")])]),t._v(\" \"),a(\"h2\",{attrs:{id:\"线程的控制\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#线程的控制\"}},[t._v(\"#\")]),t._v(\" 线程的控制\")]),t._v(\" \"),a(\"p\",[t._v(\"线程的控制是指通过一些特定的函数对线程进行终止、连接、取消、清除等操作。\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"线程终止\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#线程终止\"}},[t._v(\"#\")]),t._v(\" 线程终止\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[a(\"p\",[t._v(\"exit 是危险的\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"如果进程中的任意一个线程调用了exit，_Exit， _exit，那么整个进程就会终止。\")])])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"普通的单个线程有3种方式退出（不会终止进程）\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[a(\"p\",[t._v(\"从启动例程中返回，返回值是线程的退出码\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"线程可以被同一进程中的其它线程取消\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"线程调用pthread_exit(void *rval) 函数，rval是退出码\")]),t._v(\" \"),a(\"div\",{staticClass:\"language-c extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-c\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"void\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"pthread_exit\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"void\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),t._v(\"retval\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n函数总数成功的\\n\")])])]),a(\"div\",{staticClass:\"language-c extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-c\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"include\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"stdio.h\"')])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"include\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"pthread.h\"')])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"include\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"string.h\"')])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"include\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"stdlib.h\"')])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"include\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"unistd.h\"')])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"include\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"sys/types.h\"')])]),t._v(\"\\n\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"void\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"thread_fun\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"void\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),t._v(\"arg\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"if\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"strcmp\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"1\"')]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"char\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"arg\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"==\")]),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"0\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n                \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"printf\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"new thread return\\\\n\"')]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n                \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"void\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"1\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"if\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"strcmp\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"2\"')]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"char\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"arg\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"==\")]),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"0\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n                \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"printf\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"new thread pthread_exit\\\\n\"')]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n                \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"pthread_exit\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"void\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"2\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"if\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"strcmp\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"3\"')]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"char\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"arg\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"==\")]),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"0\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n                \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"printf\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"new thread exit\\\\n\"')]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n                \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"exit\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"3\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"main\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\" argc\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"char\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),t._v(\"argv\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\" err\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"pthread_t\")]),t._v(\" self\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        err \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"pthread_create\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"&\")]),t._v(\"self\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),a(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"NULL\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"thread_fun\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"void\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"argv\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"1\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"if\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"err\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"!=\")]),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"0\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n                \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"printf\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"create new thread failed\\\\n\"')]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n                \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"-\")]),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"1\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"sleep\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"2\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"0\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\")])])])])])])]),t._v(\" \"),a(\"h3\",{attrs:{id:\"线程链接\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#线程链接\"}},[t._v(\"#\")]),t._v(\" 线程链接\")]),t._v(\" \"),a(\"div\",{staticClass:\"language-c extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-c\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"pthread_join\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"pthread_t\")]),t._v(\" tid\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"void\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),t._v(\"rval\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"pthread_t\")]),t._v(\" tid \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//指定线程的tid\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"void\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),t._v(\"rval \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//参数的rval是指定线程的返回码，如果线程被取消，那么rval是PTHREAD_CANCELED\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 返回值：成功0 失败错误码\")]),t._v(\"\\n\")])])]),a(\"ul\",[a(\"li\",[t._v(\"使一个线程等待另一个线程结束 ， 代码中如果没有pthread_join，主线程会很快结束从而使整个进程结束，从而使创建的线程没有机会开始执行就结束了。\")]),t._v(\" \"),a(\"li\",[t._v(\"加入pthread_join后，主线程会一直等待直到等待的线程结束自己才结束，使创建的线程有机会执行。\")]),t._v(\" \"),a(\"li\",[t._v(\"调用该函数会一直阻塞，直到指定的线程tid调用pthread_exit从启动例程返回或者被取消\")]),t._v(\" \"),a(\"li\",[t._v(\"调用该函数会使指定线程处于分离状态，如果指定线程已经处于分离状态，那么调用就会失败\")])]),t._v(\" \"),a(\"div\",{staticClass:\"language-c extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-c\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"pthread_detach\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"pthread_t\")]),t._v(\" thread\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\nthread \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 线程tid\")]),t._v(\"\\n\")])])]),a(\"ul\",[a(\"li\",[t._v(\"该函数可以分离一个线程\")]),t._v(\" \"),a(\"li\",[t._v(\"成功返回0 失败返回错误码\")])]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"函数test\")])]),t._v(\" \"),a(\"div\",{staticClass:\"language-c extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-c\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"include\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"stdio.h\"')])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"include\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"pthread.h\"')])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"include\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"string.h\"')])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"include\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"stdlib.h\"')])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"include\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"unistd.h\"')])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"include\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"sys/types.h\"')])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"void\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"thread_fun1\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"void\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),t._v(\"arg\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"printf\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"i am thread one\\\\n\"')]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"return\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"void\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"1\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"void\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"thread_fun2\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"void\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),t._v(\"arg\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"printf\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"i am thread two\"')]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"pthread_detach\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"pthread_self\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"pthread_exit\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"void\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"2\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"main\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\" err1\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"err2\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"pthread_t\")]),t._v(\" self1\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"self2\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"void\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),t._v(\"rval1\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),t._v(\"rval2\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\terr1 \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"pthread_create\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"&\")]),t._v(\"self1\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),a(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"NULL\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"thread_fun1\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),a(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"NULL\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\terr2 \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"pthread_create\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"&\")]),t._v(\"self2\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),a(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"NULL\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"thread_fun2\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),a(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"NULL\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"if\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"err1 \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"||\")]),t._v(\" err2\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n\\t\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"printf\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"create new thread failed\\\\n\"')]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\t\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"0\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"printf\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"my name is main thread successed!\\\\n\"')]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"printf\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"join1 return code is %d\\\\n \"')]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"pthread_join\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"self1\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"&\")]),t._v(\"rval1\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"printf\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"join2 return code is %d\\\\n \"')]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"pthread_join\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"self2\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"&\")]),t._v(\"rval2\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"printf\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"thread1 exit code is %d\\\\n\"')]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"rval1\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"printf\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"thread2 exit code is %d\\\\n\"')]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"rval2\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"printf\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"my name is main thread successed!\\\\n\"')]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\t\\n\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"0\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\")])])]),a(\"p\",[a(\"strong\",[t._v(\"结果\")])]),t._v(\" \"),a(\"div\",{staticClass:\"language-shell extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-shell\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),t._v(\"root@localhost test\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"# gcc -lpthread -o join join.c \")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),t._v(\"root@localhost test\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"# ./join \")]),t._v(\"\\nmy name is main thread successed\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"!\")]),t._v(\"\\ni am thread twoi am thread one\\njoin1 \"),a(\"span\",{pre:!0,attrs:{class:\"token builtin class-name\"}},[t._v(\"return\")]),t._v(\" code is \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"0\")]),t._v(\"\\n join2 \"),a(\"span\",{pre:!0,attrs:{class:\"token builtin class-name\"}},[t._v(\"return\")]),t._v(\" code is \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"22\")]),t._v(\"\\n thread1 \"),a(\"span\",{pre:!0,attrs:{class:\"token builtin class-name\"}},[t._v(\"exit\")]),t._v(\" code is \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"1\")]),t._v(\"\\nthread2 \"),a(\"span\",{pre:!0,attrs:{class:\"token builtin class-name\"}},[t._v(\"exit\")]),t._v(\" code is \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"0\")]),t._v(\"\\nmy name is main thread successed\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"!\")]),t._v(\"\\n\")])])]),a(\"h3\",{attrs:{id:\"线程取消\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#线程取消\"}},[t._v(\"#\")]),t._v(\" 线程取消\")]),t._v(\" \"),a(\"p\",[t._v(\"取消只是发送一个去请求，使得线程处于就绪状态，并不是使得线程终止。\")]),t._v(\" \"),a(\"div\",{staticClass:\"language-c extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-c\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"pthread_cancel\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"pthread_t\")]),t._v(\" tid\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// tid 待取消的指定的线程\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 成功返回0 \")]),t._v(\"\\n\")])])]),a(\"div\",{staticClass:\"language-c extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-c\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"pthread_setcancelstate\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\" state\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),t._v(\"oldstate\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\")])])]),a(\"ul\",[a(\"li\",[t._v(\"设置线程对cancel信号的反应\")]),t._v(\" \"),a(\"li\",[t._v(\"state 有两种方式\\n\"),a(\"ul\",[a(\"li\",[t._v(\"PTHREAD_CANCEL_ENABLE（缺省）\")]),t._v(\" \"),a(\"li\",[t._v(\"PTHREAD_CANCEL DISABLE\")])])])]),t._v(\" \"),a(\"p\",[t._v(\"取消线程的类型，是线程对取消信号的响应方式，立即取消或者延时取消，线程创建时\"),a(\"strong\",[t._v(\"默认延时取消\")]),t._v(\"。延时取消是到取消点再取消。\")]),t._v(\" \"),a(\"div\",{staticClass:\"language-c extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-c\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"pthread_setcanceltype\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\" type\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),t._v(\"oldtype\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\")])])]),a(\"p\",[a(\"strong\",[t._v(\"关于取消点\")])]),t._v(\" \"),a(\"p\",[t._v(\"取消一个线程，它通常需要被取消线程的配合，线程在很多时候会查看自己是否有取消请求，如果有就主动退出，这些查看是否有取消的地方称为取消点。\")]),t._v(\" \"),a(\"p\",[t._v(\"很多时候都有查看的动作：\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"pthread_join()\")]),t._v(\" \"),a(\"li\",[t._v(\"pthread_testcancel()\")]),t._v(\" \"),a(\"li\",[t._v(\"pthread_cond_wait()\")]),t._v(\" \"),a(\"li\",[t._v(\"pthread_timedwait()\")]),t._v(\" \"),a(\"li\",[t._v(\"sem_wait()\")]),t._v(\" \"),a(\"li\",[t._v(\"sigwait()\")]),t._v(\" \"),a(\"li\",[t._v(\"write\")]),t._v(\" \"),a(\"li\",[t._v(\"read\")]),t._v(\" \"),a(\"li\",[t._v(\"大多数的系统阻塞调用\")])]),t._v(\" \"),a(\"h3\",{attrs:{id:\"信号处理\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#信号处理\"}},[t._v(\"#\")]),t._v(\" 信号处理\")]),t._v(\" \"),a(\"blockquote\",[a(\"p\",[a(\"a\",{attrs:{href:\"https://blog.csdn.net/lsjseu/article/details/51823468\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"(linux多线程信号处理\"),a(\"OutboundLink\")],1)])]),t._v(\" \"),a(\"h4\",{attrs:{id:\"pthread-kill\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#pthread-kill\"}},[t._v(\"#\")]),t._v(\" pthread_kill\")]),t._v(\" \"),a(\"div\",{staticClass:\"language-c extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-c\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"pthread_kill\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"pthread_t\")]),t._v(\" tid\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\" sig\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\")])])]),a(\"ul\",[a(\"li\",[t._v(\"不会杀掉线程，而是发送一个信号量\")]),t._v(\" \"),a(\"li\",[t._v(\"tid 要发送信号的线程tid\")]),t._v(\" \"),a(\"li\",[t._v(\"sig 信号 0是保留信号，作用是用来判断线程是不是还活着\")]),t._v(\" \"),a(\"li\",[t._v(\"返回值\\n\"),a(\"ul\",[a(\"li\",[t._v(\"成功 0\")]),t._v(\" \"),a(\"li\",[t._v(\"线程不存在 ESRCH\")]),t._v(\" \"),a(\"li\",[t._v(\"线程不合法 EINVAL\")])])])]),t._v(\" \"),a(\"div\",{staticClass:\"language-c extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-c\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\" kill_rc \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"pthread_kill\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"thread_id\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"0\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"if\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"kill_rc \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"==\")]),t._v(\" ESRCH\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"printf\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"the specified thread did not exists or already quit\\\\n\"')]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"else\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"if\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"kill_rc \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"==\")]),t._v(\" EINVAL\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"printf\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"signal is invalid\\\\n\"')]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"else\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"printf\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"the specified thread is alive\\\\n\"')]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\")])])]),a(\"h4\",{attrs:{id:\"信号处理-2\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#信号处理-2\"}},[t._v(\"#\")]),t._v(\" 信号处理\")]),t._v(\" \"),a(\"div\",{staticClass:\"language-c extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-c\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"sigaction\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\" signum\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"const\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"struct\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"sigaction\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),t._v(\"act\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"struct\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"sigaction\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),t._v(\"oldact\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\")])])]),a(\"p\",[t._v(\"给信号signum设置一个处理函数，处理函数在sigction中指定\")]),t._v(\" \"),a(\"p\",[t._v(\"act.sa_mask 信号屏蔽字\")]),t._v(\" \"),a(\"p\",[t._v(\"act.sa_handler 信号集处理程序\")]),t._v(\" \"),a(\"p\",[t._v(\"int sigemptyset(sigset_t *set);清空信号集\")]),t._v(\" \"),a(\"p\",[t._v(\"int sigfillset(sigset_t *set);将所有信号加入信号集\")]),t._v(\" \"),a(\"p\",[t._v(\"int sigaddset(sigset_t *set,int signum);增加一个信号到信号集\")]),t._v(\" \"),a(\"p\",[t._v(\"int sigdelset(sigset_t *set,int signum);删除一个信号到信号集\")]),t._v(\" \"),a(\"h2\",{attrs:{id:\"线程的同步\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#线程的同步\"}},[t._v(\"#\")]),t._v(\" 线程的同步\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"互斥量\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#互斥量\"}},[t._v(\"#\")]),t._v(\" 互斥量\")]),t._v(\" \"),a(\"p\",[t._v(\"互斥量是另一种用于多线程中的同步访问方法，它允许程序锁住某个对象，使得每次只能有一个线程访问它。为了控制对关键代码的访问，必须在进入这段代码之前锁住一个互斥量，然后在完成操作之后解锁。\")]),t._v(\" \"),a(\"h4\",{attrs:{id:\"为什么要使用互斥量\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#为什么要使用互斥量\"}},[t._v(\"#\")]),t._v(\" 为什么要使用互斥量\")]),t._v(\" \"),a(\"p\",[t._v(\"使用互斥量可以确保\"),a(\"strong\",[t._v(\"线程同步\")]),t._v(\"。\")]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"寄存器处理数据+1操作一般分为三步\")])]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"从内存读变量值到寄存器\")]),t._v(\" \"),a(\"li\",[t._v(\"寄存器的值加1\")]),t._v(\" \"),a(\"li\",[t._v(\"将寄存器的值写回内存\")])]),t._v(\" \"),a(\"img\",{attrs:{src:t.$withBase(\"/imags/dxc_tbswt.png\"),alt:\"dxc_tbswt\"}}),t._v(\" \"),a(\"p\",[t._v(\"当多个线程共享相同的内存时，需要每一个线程看到相同的视图。当一个线程修改变量时，其它线程也可以读取或者修改这个变量，就需要对这些线程进行同步操作，确保访问的变量不会混乱无效出错。\")]),t._v(\" \"),a(\"h4\",{attrs:{id:\"互斥锁的初始化、上锁、解锁、销毁\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#互斥锁的初始化、上锁、解锁、销毁\"}},[t._v(\"#\")]),t._v(\" 互斥锁的初始化、上锁、解锁、销毁\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"互斥量是\"),a(\"code\",[t._v(\"pthread_mutex_t\")]),t._v(\"类型的变量。\")]),t._v(\" \"),a(\"li\",[t._v(\"互斥量有两种状态：\"),a(\"code\",[t._v(\"lock（上锁）\")]),t._v(\"、\"),a(\"code\",[t._v(\"unlock（解锁）\")])]),t._v(\" \"),a(\"li\",[t._v(\"当对一个互斥量加锁后，其他任何试图访问互斥量的线程都会被堵塞，直到当前线程释放互斥锁上的锁。\")]),t._v(\" \"),a(\"li\",[t._v(\"如果释放互斥量上的锁后，有多个堵塞线程，这些线程只能按一定的顺序得到互斥量的访问权限，完成对共享资源的访问后，要对互斥量进行解锁，否则其他线程将一直处于阻塞状态。\")])]),t._v(\" \"),a(\"div\",{staticClass:\"language-c extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-c\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"include\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"<pthread.h>\")])]),t._v(\"\\n\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//pthread_mutex_t是锁类型，用来定义互斥锁\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"pthread_mutex_t\")]),t._v(\" mutex \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" PTHREAD_MUTEX_INITIALIZER\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//互斥锁的初始化\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//restrict，C语言中的一种类型限定符，用于告诉编译器，对象已经被指针所引用，不能通过除该指针外所有其他直接或间接的方式修改该对象的内容。 第二个参数一般为NULL\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"pthread_mutex_init\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"pthread_mutex_t\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),t._v(\"restrict mutex\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"const\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"pthread_mutexattr_t\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),t._v(\"restrict attr\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//上锁\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"pthread_mutex_lock\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"pthread_mutex_t\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),t._v(\"mutex\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//判断是否上锁\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//返回值：0表示已上锁，非0表示未上锁。\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"pthread_mutex_trylock\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"pthread_mutex_t\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),t._v(\"mutex\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//解锁 \")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"pthread_mutex_unlock\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"pthread_mutex_t\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),t._v(\"mutex\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//销毁互斥锁\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"pthread_mutex_destroy\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"pthread_mutex_t\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),t._v(\"mutex\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\")])])]),a(\"p\",[t._v(\"函数test\")]),t._v(\" \"),a(\"div\",{staticClass:\"language-c extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-c\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"include\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"<stdio.h>\")])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"include\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"<stdlib.h>\")])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"include\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"<windows.h>\")])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"include\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"<iostream>\")])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"include\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"<queue>\")])]),t._v(\"\\n\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"include\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"include/pthread.h\"')])]),t._v(\"\\n\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"ifndef\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token expression\"}},[t._v(\"_WIN64\")])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"pragma\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token expression\"}},[a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"comment\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"lib\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")])]),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\".\\\\\\\\lib32\\\\\\\\pthreadVC2.lib\"')]),a(\"span\",{pre:!0,attrs:{class:\"token expression\"}},[a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")])])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"else\")])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"pragma\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token expression\"}},[a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"comment\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"lib\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")])]),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\".\\\\\\\\lib64\\\\\\\\pthreadVC2.lib\"')]),a(\"span\",{pre:!0,attrs:{class:\"token expression\"}},[a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")])])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"endif\")]),t._v(\" \")]),t._v(\"\\n\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/*\\n4、\\t互斥量用pthread_mutex_t类型的数据表示，在使用之前需要对互斥量初始化\\n1）、如果是动态分配的互斥量，在申请内存(malloc)之后, 可以调用pthread_mutex_init（）函数初始化\\n2）、如果是静态分配的互斥量，不需要调用 pthread_mutex_init() 函数。还可以把它置为常量PTHREAD_MUTEX_INITIALIZER\\n3）、动态分配的互斥量在释放内存之前需要调用pthread_mutex_destroy（）\\n*/\")]),t._v(\"\\n\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"pthread_mutex_t\")]),t._v(\" mutex \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" PTHREAD_MUTEX_INITIALIZER\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"struct\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"queue\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\" len\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\" write_pos\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\" read_pos\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\" data\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"50\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"struct\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"queue\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"queue_init\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"struct\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"queue\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),t._v(\"que\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//申请内存\")]),t._v(\"\\n\\tque \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"struct\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"queue\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"malloc\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"sizeof\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"struct\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"queue\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"if\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"que \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"==\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"NULL\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n\\t\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"printf\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"malloc failed\\\\n\"')]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\t\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"NULL\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\\n\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//初始化\")]),t._v(\"\\n\\tque\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"->\")]),t._v(\"len \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"0\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\tque\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"->\")]),t._v(\"write_pos \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"0\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\tque\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"->\")]),t._v(\"read_pos \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"0\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" que\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"void\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"queue_destroy\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"struct\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"queue\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),t._v(\"que\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//销毁互斥量和que\")]),t._v(\"\\n\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"pthread_mutex_destroy\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"&\")]),t._v(\"mutex\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"free\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"que\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"void\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"queue_add\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"void\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),t._v(\"arg\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"struct\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"queue\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),t._v(\"que \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"struct\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"queue\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"arg\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\" buf \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"0\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"while\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"buf \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"<\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"50\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n\\t\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"pthread_mutex_lock\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"&\")]),t._v(\"mutex\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\t\\tque\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"->\")]),t._v(\"data\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),t._v(\"que\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"->\")]),t._v(\"write_pos\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" buf\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\t\\tque\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"->\")]),t._v(\"write_pos\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"++\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\t\\tque\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"->\")]),t._v(\"len\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"++\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\t\\tbuf\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"++\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\t\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"printf\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"write data %d   to   queue\\\\n\"')]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" que\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"->\")]),t._v(\"data\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),t._v(\"que\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"->\")]),t._v(\"write_pos \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"-\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"1\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n\\t\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"pthread_mutex_unlock\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"&\")]),t._v(\"mutex\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\t\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"Sleep\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"1\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"void\")]),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"0\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"void\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"queue_del\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"void\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),t._v(\"arg\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"struct\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"queue\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),t._v(\"que \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"struct\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"queue\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"arg\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\" buf \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"0\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"while\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"1\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n\\t\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"Sleep\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"2\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\t\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"pthread_mutex_lock\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"&\")]),t._v(\"mutex\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\t\\tbuf \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" que\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"->\")]),t._v(\"data\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),t._v(\"que\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"->\")]),t._v(\"read_pos\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\t\\tque\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"->\")]),t._v(\"read_pos\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"++\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\t\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"if\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"que\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"->\")]),t._v(\"len\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"--\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"==\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"0\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n\\t\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n\\t\\t\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"printf\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"queue is empty\\\\n\"')]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\t\\t\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"void\")]),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"0\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\t\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\\t\\tbuf\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"++\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\t\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"printf\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"read  data %d   from queue\\\\n\"')]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" que\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"->\")]),t._v(\"data\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),t._v(\"que\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"->\")]),t._v(\"read_pos \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"-\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"1\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\t\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"pthread_mutex_unlock\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"&\")]),t._v(\"mutex\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"main\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"pthread_t\")]),t._v(\" tid1\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" tid2\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\" err\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"struct\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"queue\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),t._v(\"que\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//队列和锁都要初始化\")]),t._v(\"\\n\\tque \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"queue_init\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//如果是静态分配的互斥量，不需要调用 pthread_mutex_init() 函数。\")]),t._v(\"\\n\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//还可以把它置为常量PTHREAD_MUTEX_INITIALIZER\")]),t._v(\"\\n\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v('/*err = pthread_mutex_init(&mutex, NULL);\\n\\tif (err)\\n\\t{\\n\\t\\tprintf(\"mutex init failed\\\\n\");\\n\\t\\tfree(que);\\n\\t\\treturn 0;\\n\\t}\\n*/')]),t._v(\"\\n\\terr \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"pthread_create\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"&\")]),t._v(\"tid1\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"NULL\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" queue_add\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"void\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"que\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"if\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"err\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n\\t\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"printf\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"create add thread failed\\\\n\"')]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\t\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"queue_destroy\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"que\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\t\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"0\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\\n\\terr \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"pthread_create\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"&\")]),t._v(\"tid2\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"NULL\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" queue_del\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"void\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"que\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"if\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"err\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n\\t\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"printf\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"create del thread failed\\\\n\"')]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\t\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"queue_destroy\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"que\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\t\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"0\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\\n\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//等待增加和删除操作完成\")]),t._v(\"\\n\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"pthread_join\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"tid1\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"NULL\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"pthread_join\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"tid2\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"NULL\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//销毁\")]),t._v(\"\\n\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"queue_destroy\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"que\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n\\n\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"0\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\")])])]),a(\"h4\",{attrs:{id:\"死锁的情况\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#死锁的情况\"}},[t._v(\"#\")]),t._v(\" 死锁的情况\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"同一个线程已拥有A锁的情况下，再次请求获取A锁，导致线程阻塞\\n解决方法：使用完资源后立刻解锁\")]),t._v(\" \"),a(\"li\",[t._v(\"线程一拥有A锁，再次请求获取B锁，同时线程二拥有B锁，请求获取A锁，导致线程阻塞\\n解决方法：当拥有锁的情况下，请求获取另外一把锁失败时，释放已拥有的锁\")])]),t._v(\" \"),a(\"h3\",{attrs:{id:\"读写锁\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#读写锁\"}},[t._v(\"#\")]),t._v(\" 读写锁\")]),t._v(\" \"),a(\"h4\",{attrs:{id:\"读写锁与互斥锁的区别\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#读写锁与互斥锁的区别\"}},[t._v(\"#\")]),t._v(\" 读写锁与互斥锁的区别\")]),t._v(\" \"),a(\"p\",[t._v(\"互斥量可以使得多线程并行，但是带来了新的问题， 即同一时刻只有一个线程能运行，其他竞争不到互斥量的线程会被阻塞，这就阻碍了程序的并行性。\")]),t._v(\" \"),a(\"p\",[t._v(\"读写锁与互斥量类似，不过读写锁有更高的并行性。对于一个变量的读操作，完全可以让多个线程同时进行操作，多个读操作同时进行不会改变数据。\")]),t._v(\" \"),a(\"h4\",{attrs:{id:\"读写锁的状态\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#读写锁的状态\"}},[t._v(\"#\")]),t._v(\" 读写锁的状态\")]),t._v(\" \"),a(\"p\",[t._v(\"读写锁非常适合对数据结构读次数大于写次敌的程序，当它以读模式锁住时，是以共享的方式锁住的;当它以写模式谈住时,是以独占的模式谈住的。\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"读模式下加锁\\n\"),a(\"ul\",[a(\"li\",[t._v(\"多个线程可以同时占有读模式的读写锁\")]),t._v(\" \"),a(\"li\",[t._v(\"所有试图以读模式对其加锁的线程都会获得访问权，但是如果线程希望以写模式对其加锁，它必须阻塞直到所有的线程释放锁\")])])]),t._v(\" \"),a(\"li\",[t._v(\"写模式下加锁\\n\"),a(\"ul\",[a(\"li\",[t._v(\"一次只有一个线程可以占有写模式下的读写锁\")]),t._v(\" \"),a(\"li\",[t._v(\"读写锁在写加锁状态时，在它被解锁之前，所有试图对这个锁加锁的线程都会阻塞\")]),t._v(\" \"),a(\"li\",[t._v(\"线程试图以写模式对其加锁，那么读写锁会阻塞随后的读模式锁请求\")])])]),t._v(\" \"),a(\"li\",[t._v(\"不加锁\")])]),t._v(\" \"),a(\"h4\",{attrs:{id:\"读写锁的初始化和销毁\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#读写锁的初始化和销毁\"}},[t._v(\"#\")]),t._v(\" 读写锁的初始化和销毁\")]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"读写锁在使用之前必须初始化\")])]),t._v(\" \"),a(\"div\",{staticClass:\"language-c extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-c\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"pthread_rwlock_init\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"pthread_rwlock_t\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),t._v(\"restrict rwlock\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"const\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"pthread_rwlockattr_t\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),t._v(\"restrict attz\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\")])])]),a(\"p\",[t._v(\"成功返回0﹐共败返回错误码\")]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"使用完需要销毁\")])]),t._v(\" \"),a(\"div\",{staticClass:\"language-c extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-c\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"pthread_rwlock_destroy\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"pthread_rwlock_t\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),t._v(\"rwlock\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\")])])]),a(\"p\",[t._v(\"成功返回0﹐共败返回错误码\")]),t._v(\" \"),a(\"h4\",{attrs:{id:\"读模式加锁\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#读模式加锁\"}},[t._v(\"#\")]),t._v(\" 读模式加锁\")]),t._v(\" \"),a(\"div\",{staticClass:\"language-c extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-c\"}},[a(\"code\",[t._v(\"NAME\\n       pthread_rwlock_rdlock\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" pthread_rwlock_tryrdlock — lock a read\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"-\")]),t._v(\"write lock object \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"for\")]),t._v(\" reading\\n\\nSYNOPSIS\\n       \"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"include\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"<pthread.h>\")])]),t._v(\"\\n\\n       \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"pthread_rwlock_rdlock\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"pthread_rwlock_t\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),t._v(\"rwlock\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n       \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"pthread_rwlock_tryrdlock\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"pthread_rwlock_t\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),t._v(\"rwlock\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\")])])]),a(\"h4\",{attrs:{id:\"写模式加锁\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#写模式加锁\"}},[t._v(\"#\")]),t._v(\" 写模式加锁\")]),t._v(\" \"),a(\"div\",{staticClass:\"language-c extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-c\"}},[a(\"code\",[t._v(\"NAME\\n       pthread_rwlock_trywrlock\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" pthread_rwlock_wrlock — lock a read\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"-\")]),t._v(\"write lock object \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"for\")]),t._v(\" writing\\n\\nSYNOPSIS\\n       \"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"include\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"<pthread.h>\")])]),t._v(\"\\n\\n       \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"pthread_rwlock_trywrlock\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"pthread_rwlock_t\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),t._v(\"rwlock\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n       \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"pthread_rwlock_wrlock\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"pthread_rwlock_t\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),t._v(\"rwlock\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\")])])]),a(\"h4\",{attrs:{id:\"读写锁的解锁\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#读写锁的解锁\"}},[t._v(\"#\")]),t._v(\" 读写锁的解锁\")]),t._v(\" \"),a(\"div\",{staticClass:\"language-c extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-c\"}},[a(\"code\",[t._v(\"NAME\\n       pthread_rwlock_unlock — unlock a read\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"-\")]),t._v(\"write lock object\\n\\nSYNOPSIS\\n       \"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"include\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"<pthread.h>\")])]),t._v(\"\\n\\n       \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"pthread_rwlock_unlock\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"pthread_rwlock_t\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),t._v(\"rwlock\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\")])])]),a(\"h4\",{attrs:{id:\"函数实例\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#函数实例\"}},[t._v(\"#\")]),t._v(\" 函数实例\")]),t._v(\" \"),a(\"div\",{staticClass:\"language-c extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-c\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"include\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"<iostream>\")])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"include\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"<pthread.h>\")])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"include\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"<unistd.h>\")])]),t._v(\"\\n\\nusing namespace std\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"pthread_rwlock_t\")]),t._v(\" rwlock\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\" shared_num \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"100\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"void\")]),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"thread_fun1\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"void\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),t._v(\"arg\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n  \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"pthread_rwlock_wrlock\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"&\")]),t._v(\"rwlock\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n  cout \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"<<\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"thread 1: \"')]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"<<\")]),t._v(\" shared_num \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"<<\")]),t._v(\" endl\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n  \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"sleep\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"2\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n  \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"pthread_rwlock_unlock\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"&\")]),t._v(\"rwlock\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n  \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"void\")]),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"1\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"void\")]),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"thread_fun2\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"void\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),t._v(\"arg\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n  \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"pthread_rwlock_rdlock\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"&\")]),t._v(\"rwlock\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n  cout \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"<<\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"thread 2: \"')]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"<<\")]),t._v(\" shared_num \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"<<\")]),t._v(\" endl\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n  \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"sleep\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"2\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n  \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"pthread_rwlock_unlock\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"&\")]),t._v(\"rwlock\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n  \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"void\")]),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"1\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"main\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n  \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"pthread_t\")]),t._v(\" tid1\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" tid2\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n  \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"pthread_rwlock_init\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"&\")]),t._v(\"rwlock\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"NULL\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n  \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"pthread_create\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"&\")]),t._v(\"tid1\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"NULL\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" thread_fun1\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"NULL\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n  \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"pthread_create\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"&\")]),t._v(\"tid2\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"NULL\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" thread_fun2\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"NULL\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n  \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"pthread_join\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"tid1\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"NULL\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n  \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"pthread_join\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"tid2\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"NULL\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n  \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"pthread_rwlock_destroy\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"&\")]),t._v(\"rwlock\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n  \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"0\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\")])])]),a(\"h3\",{attrs:{id:\"条件变量\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#条件变量\"}},[t._v(\"#\")]),t._v(\" 条件变量\")]),t._v(\" \"),a(\"h4\",{attrs:{id:\"为什么需要条件变量\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#为什么需要条件变量\"}},[t._v(\"#\")]),t._v(\" 为什么需要条件变量\")]),t._v(\" \"),a(\"blockquote\",[a(\"ol\",[a(\"li\",[a(\"p\",[t._v(\"有一个IO请求队列，入队线程不断的往队列里面push_back请求，出队线程不断的从队列里面pop_front请求。\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"入队线程在push_back的时候要独占队列，出队线程在pop_front的时候也要独占队列。\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"如果在某一时刻，入队线程抢到了互斥量，但是发现队列是满的，自己不断的轮询查询队列是否非满状态这样很消耗CPU资源，也导致无意义的占用锁资源。\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"出队线程由于拿不到互斥量，一直阻塞。这样会导致程序僵死或者时间消耗变大。\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"换句话说就是当线程拿到锁之后，如果发现不满足自己的执行条件就应该立即释放锁，并阻塞在当前位置，等待满足自己的执行条件时，通过某种途径来唤醒它继续运行。\")])])]),t._v(\" \"),a(\"blockquote\",[a(\"p\",[t._v(\"如，入队线程查询到队列是满的时候，就应该释放锁，出队线程开始工作消耗队列。\")])]),t._v(\" \"),a(\"p\",[t._v(\"这时我们引入条件变量来解决这种场景。\")])]),t._v(\" \"),a(\"h4\",{attrs:{id:\"条件队列的初始化、销毁\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#条件队列的初始化、销毁\"}},[t._v(\"#\")]),t._v(\" 条件队列的初始化、销毁\")]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"条件变量的申明：pthread_cond_t cond;\")])]),t._v(\" \"),a(\"div\",{staticClass:\"language-c extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-c\"}},[a(\"code\",[t._v(\"NAME\\n       pthread_cond_init — initialize condition variables\\n\\nSYNOPSIS\\n       \"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"include\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"<pthread.h>\")])]),t._v(\"\\n\\n       \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"pthread_cond_init\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"pthread_cond_t\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),t._v(\"restrict cond\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n           \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"const\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"pthread_condattr_t\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),t._v(\"restrict attr\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\")])])]),a(\"p\",[t._v(\"第一个参数是创建的条件变量，第二个参数是属性，默认为NULL\")]),t._v(\" \"),a(\"div\",{staticClass:\"language-c extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-c\"}},[a(\"code\",[t._v(\"NAME\\n       pthread_cond_destroy — destroy condition variables\\n\\nSYNOPSIS\\n       \"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"include\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"<pthread.h>\")])]),t._v(\"\\n\\n       \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"pthread_cond_destroy\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"pthread_cond_t\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),t._v(\"cond\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\")])])]),a(\"h4\",{attrs:{id:\"条件队列的使用\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#条件队列的使用\"}},[t._v(\"#\")]),t._v(\" 条件队列的使用\")]),t._v(\" \"),a(\"div\",{staticClass:\"language-c extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-c\"}},[a(\"code\",[t._v(\"NAME\\n       pthread_cond_wait — wait on a condition\\n\\nSYNOPSIS\\n       \"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"include\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"<pthread.h>\")])]),t._v(\"\\n\\n       \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"pthread_cond_wait\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"pthread_cond_t\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),t._v(\"restrict cond\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n           \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"pthread_mutex_t\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),t._v(\"restrict mutex\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\")])])]),a(\"ul\",[a(\"li\",[a(\"p\",[t._v(\"需要等待条件为真，即等待传入的第一个参数cond，执行pthread_cond_wait函数的线程会阻塞，直到cond条件为真，线程恢复运行。\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"第二个参数互斥量mutex，就是线程在还没发现是否满足自己条件时加的锁，在pthread_cond_wait函数里面进行释放。当条件满足时，继续对互斥量加锁，线程就可以在满足自己条件的情况下继续往下执行。\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"这一系列动作都由pthread_cond_wait在完成。\")])])]),t._v(\" \"),a(\"div\",{staticClass:\"language-c extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-c\"}},[a(\"code\",[t._v(\"NAME\\n       pthread_cond_timedwait — wait on a condition\\n\\nSYNOPSIS\\n       \"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"include\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"<pthread.h>\")])]),t._v(\"\\n\\n       \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"pthread_cond_timedwait\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"pthread_cond_t\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),t._v(\"restrict cond\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n           \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"pthread_mutex_t\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),t._v(\"restrict mutex\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n           \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"const\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"struct\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"timespec\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),t._v(\"restrict abstime\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\")])])]),a(\"ul\",[a(\"li\",[t._v(\"在等待条件变量cond为真的过程中增加等待时间，超过等待时间就不等了，直接返回。\")])]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"当条件满足时，需要唤醒等待条件变量的线程：\")])]),t._v(\" \"),a(\"div\",{staticClass:\"language-cpp extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-cpp\"}},[a(\"code\",[t._v(\"NAME\\n       pthread_cond_broadcast\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" pthread_cond_signal — broadcast \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"or\")]),t._v(\" signal a condition\\n\\nSYNOPSIS\\n       \"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"include\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"<pthread.h>\")])]),t._v(\"\\n\\n       \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"pthread_cond_broadcast\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"pthread_cond_t \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),t._v(\"cond\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n       \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"pthread_cond_signal\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"pthread_cond_t \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),t._v(\"cond\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\")])])]),a(\"p\",[t._v(\"唤醒等待条件变量的线程有两个函数：\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"pthread_cond_broadcast唤醒等待条件变量的所有线程。\")]),t._v(\" \"),a(\"li\",[t._v(\"pthread_cond_signal至少唤醒等待条件变量的某一个线程，至于唤醒哪一个线程由系统的调度机制决定\")])]),t._v(\" \"),a(\"h4\",{attrs:{id:\"函数实例-2\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#函数实例-2\"}},[t._v(\"#\")]),t._v(\" 函数实例\")]),t._v(\" \"),a(\"div\",{staticClass:\"language-c extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-c\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"include\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"<iostream>\")])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"include\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"<pthread.h>\")])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"include\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"<unistd.h>\")])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"include\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"<list>\")])]),t._v(\"\\n\\nusing namespace std\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"pthread_mutex_t\")]),t._v(\" lock\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//入队,出队之前要加独占锁\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"pthread_cond_t\")]),t._v(\" cond\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//条件变量\")]),t._v(\"\\n\\nlist\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"<\")]),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\">\")]),t._v(\" _queue\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//请求队列\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[a(\"span\",{pre:!0,attrs:{class:\"token directive-hash\"}},[t._v(\"#\")]),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"define\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token macro-name\"}},[t._v(\"queue_max_size\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token expression\"}},[a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"5\")]),t._v(\" \")]),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//队列最大存放请求个数\")])]),t._v(\"\\n\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"void\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"_enqueue\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\" op\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n  \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"pthread_mutex_lock\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"&\")]),t._v(\"lock\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n  \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"if\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"_queue\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"size\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\">=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"5\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    cout \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"<<\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"current queue is full, please wait\"')]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"<<\")]),t._v(\" endl\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"pthread_cond_wait\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"&\")]),t._v(\"cond\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"&\")]),t._v(\"lock\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//队列满了就阻塞这里,并释放互斥量,等待条件变量唤醒\")]),t._v(\"\\n  \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n  _queue\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"push_back\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"op\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n  \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"pthread_mutex_unlock\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"&\")]),t._v(\"lock\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"_dequeue\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n  \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\" op\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n  \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"pthread_mutex_lock\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"&\")]),t._v(\"lock\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n  \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"if\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"_queue\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"empty\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    cout \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"<<\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"current queue is empty\"')]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"<<\")]),t._v(\" endl\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n  \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"else\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    op \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" _queue\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"front\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    _queue\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"pop_front\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"pthread_cond_signal\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"&\")]),t._v(\"cond\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//通知条件变量满足条件了,唤醒因为这个条件变量阻塞的线程\")]),t._v(\"\\n  \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n  \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"pthread_mutex_unlock\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"&\")]),t._v(\"lock\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n  \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" op\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//入队线程工作函数\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"void\")]),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"enqueue_op\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"void\")]),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),t._v(\" arg\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n  \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\" n \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"1\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//每次入队的内容是一个整数\")]),t._v(\"\\n  \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"while\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"true\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"sleep\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"1\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//控制每秒入队一个请求\")]),t._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"_enqueue\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"n\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    cout \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"<<\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"op enqueue success: \"')]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"<<\")]),t._v(\" n \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"<<\")]),t._v(\" endl\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    n\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"++\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n  \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\\n  \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"NULL\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//出队线程工作函数\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"void\")]),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"dequeue_op\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"void\")]),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),t._v(\" arg\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n  \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\" op\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//每次出队的请求\")]),t._v(\"\\n  \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"while\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"true\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"sleep\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"2\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//控制每秒出队一个请求\")]),t._v(\"\\n    op \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"_dequeue\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    cout \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"<<\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"op dequeue success \"')]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"<<\")]),t._v(\" op \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"<<\")]),t._v(\" endl\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n  \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\\n  \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"NULL\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"main\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\" args\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"const\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"char\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),t._v(\"argv\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 初始化互斥量和条件变量 \")]),t._v(\"\\n  \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"pthread_mutex_init\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"&\")]),t._v(\"lock\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"NULL\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n  \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"pthread_cond_init\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"&\")]),t._v(\"cond\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"NULL\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 定义两个线程变量 \")]),t._v(\"\\n  \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"pthread_t\")]),t._v(\" th_enqueue\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" th_dequeue\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//入队线程\")]),t._v(\"\\n  \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"pthread_create\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"&\")]),t._v(\"th_enqueue\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"NULL\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" enqueue_op\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"NULL\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n  \\t\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 出队线程\")]),t._v(\"\\n  \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"pthread_create\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"&\")]),t._v(\"th_dequeue\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"NULL\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" dequeue_op\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"NULL\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n  \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//等待子线程值执行完成\")]),t._v(\"\\n  \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"pthread_join\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"th_enqueue\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"NULL\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n  \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"pthread_join\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"th_dequeue\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"NULL\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n  \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//销毁资源\")]),t._v(\"\\n  \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"pthread_mutex_destroy\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"&\")]),t._v(\"lock\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n  \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"pthread_cond_destroy\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"&\")]),t._v(\"cond\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n  \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"0\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);","extractedComments":[]}